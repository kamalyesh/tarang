{"version":3,"sources":["../../src/lib/utils/binaryFloor.js","../../src/lib/components/Bar.js","../../src/lib/components/Line.js","../../src/index.js","App.js","index.js"],"names":["binaryFloor","number","returnValue","getNextId","Tarang","controls","isPlaying","setIsPlaying","useState","canvasId","setCanvasId","dimensions","setDimensions","WIDTH","HEIGHT","CONTROLS_HEIGHT","isControlsVisible","setIsControlsVisible","audioRef","useRef","audioContextRef","audioSrcRef","analyserRef","svgRef","useEffect","isNaN","width","newDimensions","clearSvg","updateSvg","height","frequencies","d","i","newStyle","coverArtUrl","console","play","window","Audio","event","bufferLength","Uint8Array","d3","updateFrequencyData","cancelAnimationFrame","requestAnimationFrame","error","createSvg","stop","focusIn","focusOut","onMouseEnter","onFocus","onPointerEnter","onMouseLeave","onBlur","onPointerLeave","style","top","left","position","backgroundColor","id","bottom","right","overflow","onClick","lineFunc","audio","App","initialSrcArray","audioUrl","srcArray","updateSrcArray","src","updateSrc","newUrl","setNewUrl","lineControlsVisible","setLineControlsVisible","barControlsVisible","setBarControlsVisible","updateNewUrl","concat","getFileName","url","split","length","className","map","srcItem","srcIndex","key","JSON","stringify","target","type","value","onChange","e","placeholder","maxHeight","overflowY","htmlFor","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9ed7ae1.chunk.js","sourcesContent":["function binaryFloor(number) {\n    let returnValue = 1\n    while (number / 2 > 1) {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    }\n    // console.log('returnValue', returnValue)\n    return returnValue;\n}\n\nexport default binaryFloor;\n","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport binaryFloor from \"../utils/binaryFloor\";\r\nimport * as d3 from 'd3'\r\nimport idman from 'idman';\r\nconst { getNextId } = idman;\r\n\r\nexport default function Bar({ audioUrl, coverArtUrl, width, height, controls = false }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const initialDimensions = { WIDTH: 256, HEIGHT: 280, CONTROLS_HEIGHT: 30 }\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [canvasId, setCanvasId] = useState(getNextId())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n    const BAR_PADDING = 1\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    WIDTH: binaryFloor(width)\r\n                }\r\n            });\r\n            clearSvg()\r\n        }\r\n    }, [width])\r\n\r\n    // useEffect(() => {\r\n    //     if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n    //         if (height > 280) {\r\n    //             setDimensions(newDimensions => {\r\n    //                 return {\r\n    //                     ...newDimensions,\r\n    //                     HEIGHT: height\r\n    //                 }\r\n    //             });\r\n    //         } else {\r\n    //             setDimensions(newDimensions => {\r\n    //                 return {\r\n    //                     ...newDimensions,\r\n    //                     HEIGHT: 280\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //         clearSvg()\r\n    //     }\r\n    // }, [height])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.selectAll(\"*\").remove()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    const updateSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.selectAll('rect')\r\n                .data(frequencies)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('fill', function (d) {\r\n                    return \"#000\"\r\n                })\r\n                .attr('width', width / frequencies.length - BAR_PADDING)\r\n                .attr('x', function (d, i) {\r\n                    return i * (width / frequencies.length);\r\n                })\r\n            svgRef.current.selectAll('rect')\r\n                .data(frequencies)\r\n                .attr('y', function (d, i) {\r\n                    return height - d\r\n                })\r\n                .attr('height', function (d, i) {\r\n                    return d\r\n                });\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (svgRef.current) {\r\n            let newStyle = coverArtUrl ? `background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 118, 124, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))'\r\n            console.log('changing style', newStyle)\r\n            svgRef.current.select('#' + canvasId)\r\n                .attr('style', newStyle)\r\n        }\r\n    }, [coverArtUrl])\r\n\r\n    const createSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        if (!d3) console.warn(\"d3 is not found. Tarang may not behave as expected.\")\r\n        else {\r\n            // console.log(\"creating visualization graph \", { d3 })\r\n            if (!svgRef.current) {\r\n                svgRef.current = d3.select('#' + canvasId)\r\n                    .append('svg')\r\n                    .attr('height', height)\r\n                    .attr('width', width)\r\n                    .attr('class', 'my-1')\r\n                    .attr('style', coverArtUrl ? `background: liniear-gradient(to bottom, rgba(117, 118, 124, 0.52), rgba(53, 57, 64, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))')\r\n                    .attr('id', \"bar_\" + canvasId + \"_\" + getNextId());\r\n            }\r\n\r\n            const updateFrequencyData = () => {\r\n                try {\r\n                    if (!audioRef.current || audioRef.current.paused) {\r\n                        cancelAnimationFrame(updateFrequencyData)\r\n                        // return;\r\n                    } else {\r\n                        requestAnimationFrame(updateFrequencyData)\r\n                        updateSvg(frequencies)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(error)\r\n                }\r\n            }\r\n            updateFrequencyData()\r\n        }\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            setIsPlaying(true)\r\n            if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n            if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(new Audio(audioUrl))\r\n            else audioRef.current.src = audioUrl\r\n\r\n            audioRef.current = audioSrcRef.current.mediaElement\r\n            audioRef.current.crossOrigin = \"anonymous\"\r\n            audioRef.current.load()\r\n            audioRef.current.play()\r\n            audioRef.current.onended = (event) => clearSvg()\r\n            analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n            audioSrcRef.current.connect(analyserRef.current);\r\n            audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            style={{ top: 0, left: 0, width: dimensions.WIDTH, height: isControlsVisible ? (dimensions.HEIGHT + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT, position: \"relative\", backgroundColor: \"#eeeeeeaa\" }}>\r\n            <div id={canvasId} style={{ \"flex\": 1, position: \"absolute\", top: 0, bottom: 0, left: 0, right: 0, overflow: 'hidden' }}>\r\n            </div>\r\n            {\r\n                isControlsVisible ?\r\n                    <div style={{ \"flex\": 1, position: \"absolute\", height: dimensions.CONTROLS_HEIGHT, bottom: 0, left: 0, right: 0 }} >\r\n                        <button onClick={play}>Play</button>\r\n                        <button onClick={stop}>Stop</button>\r\n                    </div> : <>\r\n                    </>\r\n            }\r\n        </div>\r\n    </>\r\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport binaryFloor from \"../utils/binaryFloor\";\r\nimport * as d3 from 'd3'\r\nimport idman from 'idman';\r\nconst { getNextId } = idman;\r\n\r\nexport default function Line({ audioUrl, coverArtUrl, width, height, controls = false }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const initialDimensions = { WIDTH: 256, HEIGHT: 280, CONTROLS_HEIGHT: 30 }\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [canvasId, setCanvasId] = useState(getNextId())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        if (width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    WIDTH: binaryFloor(width)\r\n                }\r\n            });\r\n            clearSvg()\r\n        }\r\n    }, [width])\r\n\r\n    // useEffect(() => {\r\n    //     if (height && height != dimensions.HEIGHT) {\r\n    //         if (height > 60) {\r\n    //             setDimensions(newDimensions => {\r\n    //                 return {\r\n    //                     ...newDimensions,\r\n    //                     HEIGHT: height\r\n    //                 }\r\n    //             });\r\n    //         } else {\r\n    //             setDimensions(newDimensions => {\r\n    //                 return {\r\n    //                     ...newDimensions,\r\n    //                     HEIGHT: 60\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //         clearSvg()\r\n    //     }\r\n    // }, [height])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.selectAll(\"*\").remove()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    const updateSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            clearSvg()\r\n            var lineFunc = d3.line()\r\n                .x(function (d, i) {\r\n                    return i * (width / frequencies.length);\r\n                })\r\n                .y(function (d) {\r\n                    return height - d;\r\n                })\r\n            svgRef.current.append('path')\r\n                .attr('d', lineFunc(frequencies))\r\n                .attr('stroke', 'black')\r\n                .attr('fill', 'none')\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (svgRef.current) {\r\n            svgRef.current.select('#' + canvasId)\r\n                .attr('style', coverArtUrl ? `background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 118, 124, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))')\r\n        }\r\n    }, [coverArtUrl])\r\n\r\n    const createSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        if (!d3) console.warn(\"d3 is not found. Tarang may not behave as expected.\")\r\n        else {\r\n            // console.log(\"creating visualization graph \", { d3 })\r\n            if (!svgRef.current) {\r\n                svgRef.current = d3.select('#' + canvasId)\r\n                    .append('svg')\r\n                    .attr('height', height)\r\n                    .attr('width', width)\r\n                    .attr('class', 'my-1')\r\n                    .attr('style', coverArtUrl ? `background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 118, 124, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))')\r\n                    .attr('id', \"line_\" + canvasId + \"_\" + getNextId());\r\n            }\r\n\r\n            const updateFrequencyData = () => {\r\n                try {\r\n                    if (!audioRef.current || audioRef.current.paused) {\r\n                        cancelAnimationFrame(updateFrequencyData)\r\n                        // return;\r\n                    } else {\r\n                        requestAnimationFrame(updateFrequencyData)\r\n                        updateSvg(frequencies)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(error)\r\n                }\r\n            }\r\n            updateFrequencyData()\r\n        }\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            setIsPlaying(true)\r\n            if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n            let audio = new Audio(audioUrl)\r\n            audio.crossOrigin = \"anonymous\"\r\n            if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audio)\r\n            else audioRef.current = audio\r\n\r\n            audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n            audioRef.current.load()\r\n            audioRef.current.play()\r\n            audioRef.current.onended = (event) => clearSvg()\r\n            analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n            audioSrcRef.current.connect(analyserRef.current);\r\n            audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            style={{ top: 0, left: 0, width: dimensions.WIDTH, height: isControlsVisible ? (dimensions.HEIGHT + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT, position: \"relative\", backgroundColor: \"#eeeeeeaa\" }}>\r\n            <div id={canvasId} style={{ \"flex\": 1, position: \"absolute\", top: 0, bottom: 0, left: 0, right: 0, overflow: 'hidden' }}>\r\n            </div>\r\n            {\r\n                isControlsVisible ?\r\n                    <div style={{ \"flex\": 1, position: \"absolute\", height: dimensions.CONTROLS_HEIGHT, bottom: 0, left: 0, right: 0 }} >\r\n                        <button onClick={play}>Play</button>\r\n                        <button onClick={stop}>Stop</button>\r\n                    </div> : <>\r\n                    </>\r\n            }\r\n        </div>\r\n    </>\r\n}","import binaryCeil from \"./lib/utils/binaryCeil\"\nimport binaryFloor from \"./lib/utils/binaryFloor\"\n\nimport Bar from \"./lib/components/Bar\"\nimport Line from \"./lib/components/Line\"\n\nexport const Tarang = {\n  Bar,\n  Line,\n  utils: {\n    binaryCeil,\n    binaryFloor\n  }\n}\n","import React, { useState } from 'react'\n\nimport { Tarang } from 'tarang'\nimport 'tarang/dist/index.css'\n\nconst App = () => {\n  const initialSrcArray = [\n    {\n      audioUrl: \"https://tarang.surge.sh/audio/example.mp3\",\n      coverArtUrl: \"https://tarang.surge.sh/images/example-cover.png\"\n    }\n  ]\n\n  const DEFAULT_SRC = 0\n  const [srcArray, updateSrcArray] = useState([...initialSrcArray])\n  const [src, updateSrc] = useState(DEFAULT_SRC)\n  const [newUrl, setNewUrl] = useState('')\n  const [lineControlsVisible, setLineControlsVisible] = useState(true)\n  const [barControlsVisible, setBarControlsVisible] = useState(true)\n\n  const reset = () => { updateSrcArray([...initialSrcArray]); updateSrc(DEFAULT_SRC); updateNewUrl(''); }\n  const setSrc = (index) => { updateSrc(index) }\n  const updateNewUrl = () => {\n    if (newUrl) {\n      updateSrcArray(srcArray.concat([{ audioUrl: newUrl, coverArtUrl: '#' }]))\n    }\n  }\n\n  const getFileName = (url) => {\n    let src = url.split(\"/\");\n    return src.length ? src[src.length - 1] : src;\n  }\n\n  return (\n    <div className=\"App\">\n      <section>\n        <table>\n          <thead>\n            <tr>\n              <td>\n                <legend>Playlist</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"fit-content\" }}>\n                  <tbody>\n                    {\n                      srcArray.map((srcItem, srcIndex) => <tr key={JSON.stringify(srcItem).length + \"_\" + srcIndex} style={{ \"textDecoration\": \"link\", \"cursor\": \"pointer\" }}>\n                        <td>\n                          <a target=\"_self\" onClick={() => setSrc(srcIndex)}>{getFileName(srcItem.audioUrl)}</a>\n                        </td>\n                      </tr>) || null\n                    }\n                    <tr>\n                      <td>\n                        <input style={{ width: \"90%\" }} type=\"url\" value={newUrl} onChange={(e) => setNewUrl(e.target.value)} placeholder=\"Enter mp3 url\" />\n                      </td>\n                      <td>\n                        <button type=\"button\" onClick={updateNewUrl}>Set</button>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td></td>\n                      <td>\n                        <button onClick={reset}>Reset</button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <legend>Now Playing</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"100px\", maxHeight: \"300px\", overflowY: \"scroll\" }}>\n                  <tbody>\n                    <tr>\n                      <th>\n                        {getFileName(srcArray[src].audioUrl)}\n                      </th>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Bar Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}>\n                          <Tarang.Line\n                            width={500}\n                            controls={lineControlsVisible}\n                            audioUrl={srcArray[src].audioUrl}\n                            coverArtUrl={srcArray[src].coverArtUrl}\n                          />\n                        </div>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Line Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}>\n                          <Tarang.Bar\n                            width={500}\n                            controls={barControlsVisible}\n                            audioUrl={srcArray[src].audioUrl}\n                            coverArtUrl={srcArray[src].coverArtUrl}\n                          />\n                        </div>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}