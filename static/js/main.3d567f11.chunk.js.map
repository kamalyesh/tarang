{"version":3,"sources":["../../src/lib/utils/binaryFloor.js","../../src/lib/constants.js","../../src/lib/components/Bar.js","../../src/lib/components/Line.js","../../src/index.js","../../src/lib/utils/binaryCeil.js","App.js","index.js"],"names":["binaryFloor","number","returnValue","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","CONTROLS_HEIGHT","Object","initialDimensions","constants","getNextId","idman","Tarang","Bar","audioUrl","coverArtUrl","width","height","controls","useState","isPlaying","setIsPlaying","canvasId","dimensions","setDimensions","isControlsVisible","setIsControlsVisible","audioRef","useRef","audioContextRef","audioSrcRef","analyserRef","svgRef","useEffect","clearSvg","isNaN","newDimensions","updateSvg","frequencies","_scale","assumedHeight","parseInt","ratio","Math","console","getSvgHeightScale","d","i","newStyle","play","window","Audio","bufferLength","Uint8Array","d3","updateFrequencyData","cancelAnimationFrame","requestAnimationFrame","error","createSvg","stop","focusIn","focusOut","onMouseEnter","onFocus","onPointerEnter","onMouseLeave","onBlur","onPointerLeave","style","top","left","position","backgroundColor","id","bottom","right","overflow","onClick","Line","lineFunc","audio","background","utils","binaryCeil","App","initialSrcArray","srcArray","updateSrcArray","src","updateSrc","newUrl","setNewUrl","lineControlsVisible","setLineControlsVisible","barControlsVisible","setBarControlsVisible","lineDimensions","setLineDimensions","barDimensions","setBarDimensions","lineVisualizationUpdating","setLineVisualizationUpdating","barVisualizationUpdating","setBarVisualizationUpdating","getFileName","url","split","length","className","map","srcItem","srcIndex","key","JSON","stringify","type","value","onChange","e","target","placeholder","concat","maxHeight","overflowY","htmlFor","checked","title","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d567f11.chunk.js","sourcesContent":["function binaryFloor(number) {\n    let returnValue = 1\n    while (number / 2 > 1) {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    }\n    // console.log('returnValue', returnValue)\n    return returnValue;\n}\n\nexport default binaryFloor;\n","const DEFAULT_DIMENSIONS = { WIDTH: 256, HEIGHT: 256, CONTROLS_HEIGHT: 30 }\nObject.freeze(DEFAULT_DIMENSIONS)\n// DEFAULT_DIMENSIONS.prototype.WIDTH = 256\n// DEFAULT_DIMENSIONS.prototype.HEIGHT = 256\n// DEFAULT_DIMENSIONS.prototype.CONTROLS_HEIGHT = 30\n\nexport default {\n    DEFAULT_DIMENSIONS\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport binaryFloor from \"../utils/binaryFloor\";\r\nimport constants from \"../constants\";\r\nconst initialDimensions = constants.DEFAULT_DIMENSIONS\r\nimport * as d3 from 'd3'\r\nimport idman from 'idman';\r\nconst { getNextId } = idman;\r\n\r\nexport default function Bar({ audioUrl, coverArtUrl, width, height, controls = false }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [canvasId, setCanvasId] = useState(getNextId())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n    const BAR_PADDING = 1\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    WIDTH: binaryFloor(width)\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.selectAll(\"*\").remove()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    const getSvgHeightScale = () => {\r\n        let assumedHeight = parseInt(dimensions.WIDTH * 0.5)\r\n        let ratio = Math.abs(dimensions.HEIGHT - assumedHeight) / assumedHeight\r\n        console.log({ assumedHeight }, { ratio })\r\n        return ratio\r\n    }\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n    const updateSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            let _scale = getSvgHeightScale()\r\n            svgRef.current.selectAll('rect')\r\n                .data(frequencies)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('fill', function (d) {\r\n                    return \"#000\"\r\n                })\r\n                .attr('width', width / frequencies.length - BAR_PADDING)\r\n                .attr('x', function (d, i) {\r\n                    return i * (width / frequencies.length);\r\n                })\r\n            svgRef.current.selectAll('rect')\r\n                .data(frequencies)\r\n                .attr('y', function (d, i) {\r\n                    return height - (d * _scale)\r\n                })\r\n                .attr('height', function (d, i) {\r\n                    return (d * _scale)\r\n                });\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (svgRef.current) {\r\n            let newStyle = coverArtUrl ? `background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 118, 124, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))'\r\n            console.log('changing style', newStyle)\r\n            svgRef.current.select('#' + canvasId)\r\n                .attr('style', newStyle)\r\n        }\r\n    }, [coverArtUrl])\r\n\r\n    const createSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        if (!d3) console.warn(\"d3 is not found. Tarang may not behave as expected.\")\r\n        else {\r\n            // console.log(\"creating visualization graph \", { d3 })\r\n            if (!svgRef.current) {\r\n                svgRef.current = d3.select('#' + canvasId)\r\n                    .append('svg')\r\n                    .attr('height', height)\r\n                    .attr('width', width)\r\n                    .attr('class', 'my-1')\r\n                    .attr('style', coverArtUrl ? `background: liniear-gradient(to bottom, rgba(117, 118, 124, 0.52), rgba(53, 57, 64, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))')\r\n                    .attr('id', \"bar_\" + canvasId + \"_\" + getNextId());\r\n            }\r\n\r\n            const updateFrequencyData = () => {\r\n                try {\r\n                    if (!audioRef.current || audioRef.current.paused) {\r\n                        cancelAnimationFrame(updateFrequencyData)\r\n                        // return;\r\n                    } else {\r\n                        requestAnimationFrame(updateFrequencyData)\r\n                        updateSvg(frequencies)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(error)\r\n                }\r\n            }\r\n            updateFrequencyData()\r\n        }\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            setIsPlaying(true)\r\n            if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n            if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(new Audio(audioUrl))\r\n            else audioRef.current.src = audioUrl\r\n\r\n            audioRef.current = audioSrcRef.current.mediaElement\r\n            audioRef.current.crossOrigin = \"anonymous\"\r\n            audioRef.current.load()\r\n            audioRef.current.play()\r\n            audioRef.current.onended = (event) => clearSvg()\r\n            analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n            audioSrcRef.current.connect(analyserRef.current);\r\n            audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            style={{ top: 0, left: 0, width: dimensions.WIDTH, height: isControlsVisible ? (dimensions.HEIGHT + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT, position: \"relative\", backgroundColor: \"#eeeeeeaa\" }}>\r\n            <div id={canvasId} style={{ \"flex\": 1, position: \"absolute\", top: 0, bottom: 0, left: 0, right: 0, overflow: 'hidden' }}>\r\n            </div>\r\n            {\r\n                isControlsVisible ?\r\n                    <div style={{ \"flex\": 1, position: \"absolute\", height: dimensions.CONTROLS_HEIGHT, bottom: 0, left: 0, right: 0 }} >\r\n                        <button onClick={play}>Play</button>\r\n                        <button onClick={stop}>Stop</button>\r\n                    </div> : <>\r\n                    </>\r\n            }\r\n        </div>\r\n    </>\r\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport binaryFloor from \"../utils/binaryFloor\";\r\nimport constants from \"../constants\";\r\nconst initialDimensions = constants.DEFAULT_DIMENSIONS\r\nimport * as d3 from 'd3'\r\nimport idman from 'idman';\r\nconst { getNextId } = idman;\r\n\r\nexport default function Line({ audioUrl, coverArtUrl, width, height, controls = false }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [canvasId, setCanvasId] = useState(getNextId())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    WIDTH: binaryFloor(width)\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.selectAll(\"*\").remove()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    const getSvgHeightScale = () => {\r\n        let assumedHeight = parseInt(dimensions.WIDTH * 0.5)\r\n        let ratio = Math.abs(dimensions.HEIGHT - assumedHeight) / assumedHeight\r\n        // console.log({ assumedHeight }, { ratio })\r\n        return ratio\r\n    }\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n\r\n    const updateSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        let _scale = getSvgHeightScale()\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            clearSvg()\r\n            var lineFunc = d3.line()\r\n                .x(function (d, i) {\r\n                    return i * (width / frequencies.length);\r\n                })\r\n                .y(function (d) {\r\n                    return height - (d * _scale);\r\n                })\r\n            svgRef.current.append('path')\r\n                .attr('d', lineFunc(frequencies))\r\n                .attr('stroke', 'black')\r\n                .attr('fill', 'none')\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (svgRef.current) {\r\n            svgRef.current.select('#' + canvasId)\r\n                .attr('style', coverArtUrl ? `background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 118, 124, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))')\r\n        }\r\n    }, [coverArtUrl])\r\n\r\n    const createSvg = (frequencies, height = dimensions.HEIGHT, width = dimensions.WIDTH) => {\r\n        if (!d3) console.warn(\"d3 is not found. Tarang may not behave as expected.\")\r\n        else {\r\n            // console.log(\"creating visualization graph \", { d3 })\r\n            let background = coverArtUrl ? `background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 118, 124, 0.78), url(${coverArtUrl}));` : 'background: liniear-gradient(to bottom, rgba(245, 246, 252, 0.26), rgba(117, 118, 124, 0.39))'\r\n            if (!svgRef.current) {\r\n                svgRef.current = d3.select('#' + canvasId)\r\n                    .append('svg')\r\n                    .attr('height', height)\r\n                    .attr('width', width)\r\n                    .attr('class', 'my-1')\r\n                    .attr('style', `${background}`)\r\n                    .attr('id', \"line_\" + canvasId + \"_\" + getNextId());\r\n            }\r\n\r\n            const updateFrequencyData = () => {\r\n                try {\r\n                    if (!audioRef.current || audioRef.current.paused) {\r\n                        cancelAnimationFrame(updateFrequencyData)\r\n                        // return;\r\n                    } else {\r\n                        requestAnimationFrame(updateFrequencyData)\r\n                        updateSvg(frequencies)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(error)\r\n                }\r\n            }\r\n            updateFrequencyData()\r\n        }\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            setIsPlaying(true)\r\n            if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n            let audio = new Audio(audioUrl)\r\n            audio.crossOrigin = \"anonymous\"\r\n            if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audio)\r\n            else audioRef.current = audio\r\n\r\n            audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n            audioRef.current.load()\r\n            audioRef.current.play()\r\n            audioRef.current.onended = (event) => clearSvg()\r\n            analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n            audioSrcRef.current.connect(analyserRef.current);\r\n            audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            style={{ top: 0, left: 0, width: dimensions.WIDTH, height: isControlsVisible ? (dimensions.HEIGHT + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT, position: \"relative\", backgroundColor: \"#eeeeeeaa\" }}>\r\n            <div id={canvasId} style={{ \"flex\": 1, position: \"absolute\", top: 0, bottom: 0, left: 0, right: 0, overflow: 'hidden' }}>\r\n            </div>\r\n            {\r\n                isControlsVisible ?\r\n                    <div style={{ \"flex\": 1, position: \"absolute\", height: dimensions.CONTROLS_HEIGHT, bottom: 0, left: 0, right: 0 }} >\r\n                        <button onClick={play}>Play</button>\r\n                        <button onClick={stop}>Stop</button>\r\n                    </div> : <>\r\n                    </>\r\n            }\r\n        </div>\r\n    </>\r\n}","import binaryCeil from \"./lib/utils/binaryCeil\"\nimport binaryFloor from \"./lib/utils/binaryFloor\"\nimport constants from \"./lib/constants\"\n\nimport Bar from \"./lib/components/Bar\"\nimport Line from \"./lib/components/Line\"\n\nexport const Tarang = {\n  Bar,\n  Line,\n  utils: {\n    binaryCeil,\n    binaryFloor\n  },\n  ...constants\n}\n","function binaryCeil(number) {\n    let returnValue = 1\n    do {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    } while (number / 2 > 0)\n    return returnValue;\n}\n\nexport default binaryCeil;","import React, { useState } from 'react'\n\n\nimport { Tarang } from 'tarang'\nimport 'tarang/dist/index.css'\n\nconst App = () => {\n  const initialSrcArray = [\n    {\n      audioUrl: \"https://tarang.surge.sh/audio/example.mp3\",\n      coverArtUrl: \"https://tarang.surge.sh/images/example-cover.png\"\n    }\n  ]\n\n  const DEFAULT_SRC = 0\n  const [srcArray, updateSrcArray] = useState([...initialSrcArray])\n  const [src, updateSrc] = useState(DEFAULT_SRC)\n  const [newUrl, setNewUrl] = useState('')\n  const [lineControlsVisible, setLineControlsVisible] = useState(true)\n  const [barControlsVisible, setBarControlsVisible] = useState(true)\n  // const [lineDimensionsFormValues, setLineDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n  // const [barDimensionsFormValues, setBarDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [lineDimensions, setLineDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [barDimensions, setBarDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [lineVisualizationUpdating, setLineVisualizationUpdating] = useState(false)\n  const [barVisualizationUpdating, setBarVisualizationUpdating] = useState(false)\n\n  const reset = () => { updateSrcArray([initialSrcArray[0]]); updateSrc(DEFAULT_SRC); setNewUrl(''); }\n  const setSrc = (index) => { updateSrc(index) }\n  const updateNewUrl = () => {\n    if (newUrl) {\n      updateSrcArray(srcArray.concat([{ audioUrl: newUrl, coverArtUrl: '#' }]))\n    }\n  }\n\n  const getFileName = (url) => {\n    let src = url.split(\"/\");\n    return src.length ? src[src.length - 1] : src;\n  }\n\n  // const updateLineVisualization = () => {\n  //   setLineVisualizationUpdating(true)\n  //   setLineDimensions(lineDimensionsFormValues)\n  //   setTimeout(() => {\n  //     setLineVisualizationUpdating(false)\n  //   }, [100])\n  // }\n\n  // const updateBarVisualization = () => {\n  //   setBarVisualizationUpdating(true)\n  //   setBarDimensions(barDimensionsFormValues)\n  //   setTimeout(() => {\n  //     setBarVisualizationUpdating(false)\n  //   }, [100])\n  // }\n\n  return (\n    <div className=\"App\">\n      <section>\n        <table>\n          <thead>\n            <tr>\n              <td>\n                <legend>Playlist</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"fit-content\" }}>\n                  <tbody>\n                    {\n                      srcArray.map((srcItem, srcIndex) => <tr key={JSON.stringify(srcItem).length + \"_\" + srcIndex} style={{ \"textDecoration\": \"link\", \"cursor\": \"pointer\" }}>\n                        <td>\n                          <button onClick={() => setSrc(srcIndex)}>{getFileName(srcItem.audioUrl)}</button>\n                        </td>\n                      </tr>) || null\n                    }\n                    <tr>\n                      <td>\n                        <input style={{ width: \"90%\" }} type=\"url\" value={newUrl} onChange={(e) => setNewUrl(e.target.value)} placeholder=\"Enter mp3 url\" />\n                      </td>\n                      <td>\n                        <button type=\"button\" onClick={updateNewUrl}>Set</button>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td></td>\n                      <td>\n                        <button onClick={reset}>Reset</button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <legend>Now Playing</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"100px\", maxHeight: \"300px\", overflowY: \"scroll\" }}>\n                  <tbody>\n                    <tr>\n                      <th>\n                        {getFileName(srcArray[src].audioUrl)}\n                      </th>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                height={lineDimensions.HEIGHT}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                height={barDimensions.HEIGHT}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }} title=\"height is halved\">\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                height={100}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                height={100}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}