{"version":3,"sources":["../../src/lib/utils/binaryFloor.js","../../src/lib/Constants.js","../../src/lib/utils/idman.js","../../src/lib/SvgHandler.js","../../src/lib/components/Bar/BarSvgHandler.js","../../src/lib/components/Bar/Bar.js","../../src/lib/components/Line/LineSvgHandler.js","../../src/lib/components/Line/Line.js","../../src/index.js","../../src/lib/utils/binaryCeil.js","Npm.js","Readme.js","Example.js","App.js","index.js"],"names":["binaryFloor","number","returnValue","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","CONTROLS_HEIGHT","Object","DEFAULT_DIMENSIONS_SCALE","PLAYING_STATUS","PLAYING","STOPPED","PAUSED","getNextId","id_counter","idman","next","constructor","canvasId","dimensions","Constants","scale","this","Error","d3","init","update","clear","updateSvgHeightScale","assumedHeight","parseInt","Math","updateSvgWidthScale","assumedWidth","destroy","BarSvgHandler","super","style","frequencies","graph","d","i","initialDimensions","playingStatus","LineSvgHandler","background","opacity","lineFunc","Tarang","loop","controls","muted","volume","prevAudioUrl","setPrevAudioUrl","useState","isPlaying","setIsPlaying","setCanvasId","setDimensions","isMute","muteAudio","isControlsVisible","setIsControlsVisible","audioRef","useRef","audioContextRef","audioSrcRef","analyserRef","svgRef","useEffect","clearSvg","isNaN","width","newDimensions","height","play","createSvg","updateFrequencyData","cancelAnimationFrame","requestAnimationFrame","updateSvg","error","console","stop","window","Audio","event","onEnded","bufferLength","Uint8Array","focusIn","focusOut","onMouseEnter","onFocus","onPointerEnter","onMouseLeave","onBlur","onPointerLeave","className","concat","barStyle","backgroundImage","coverArtUrl","id","onClick","lineStyle","utils","constants","Npm","href","Readme","Example","initialSrcArray","audioUrl","srcArray","updateSrcArray","src","updateSrc","newAudioUrl","setNewAudioUrl","newCoverArtUrl","setNewCoverArtUrl","lineControlsVisible","setLineControlsVisible","barControlsVisible","setBarControlsVisible","lineDimensions","setLineDimensions","barDimensions","setBarDimensions","lineVisualizationUpdating","setLineVisualizationUpdating","barVisualizationUpdating","setBarVisualizationUpdating","getFileName","url","split","length","position","map","srcItem","srcIndex","key","JSON","stringify","display","flexWrap","type","value","onChange","e","target","placeholder","maxHeight","overflowY","htmlFor","checked","title","Line","Bar","float","alert","App","backgroundColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5206ae7d.chunk.js","sourcesContent":["function binaryFloor(number) {\n    let returnValue = 1\n    while (number / 2 > 1) {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    }\n    // console.log('returnValue', returnValue)\n    return returnValue;\n}\n\nexport default binaryFloor;\n","const DEFAULT_DIMENSIONS = { WIDTH: 256, HEIGHT: 256, CONTROLS_HEIGHT: 30 }\nObject.freeze(DEFAULT_DIMENSIONS)\n\nconst DEFAULT_DIMENSIONS_SCALE = { WIDTH: 1, HEIGHT: 1 }\nObject.freeze(DEFAULT_DIMENSIONS_SCALE)\n\nconst PLAYING_STATUS = { PLAYING: \"PLAYING\", STOPPED: \"STOPPED\", PAUSED: \"PAUSED\" }\nObject.freeze(PLAYING_STATUS)\n\nexport default {\n    DEFAULT_DIMENSIONS, DEFAULT_DIMENSIONS_SCALE, PLAYING_STATUS\n}","var { getNextId } = (function () {\n    var id_counter = 0\n    function getNextId() {\n        if (id_counter < 0) return \"id_0\"\n        else return `id_${++id_counter}`\n    }\n    return { getNextId }\n}())\n\nexport const idman = { next: getNextId }","import * as d3 from 'd3'\nimport { idman } from './utils/idman';\nimport Constants from './Constants';\nimport binaryFloor from './utils/binaryFloor';\n\nexport class SvgHandler {\n    constructor(canvasId, dimensions = { ...Constants.DEFAULT_DIMENSIONS }, scale = 1) {\n        if (canvasId) this.canvasId = canvasId\n        else this.canvasId = idman.next()\n        this.customScale = scale\n        this.scale = { ...Constants.DEFAULT_DIMENSIONS_SCALE }\n        if (dimensions) {\n            this.dimensions = dimensions\n            this.updateSvgWidthScale()\n            this.updateSvgHeightScale()\n        }\n        this.graph = null;\n        if (!d3) throw new Error(\"d3 is not found. Tarang may not behave as expected.\")\n        else this.d3 = d3\n    }\n    init() {\n    }\n    update() {\n    }\n    clear() {\n        if (this.graph) {\n            this.graph.selectAll(\"*\").remove()\n        }\n    }\n    updateSvgHeightScale() {\n        let assumedHeight = parseInt(this.dimensions.WIDTH * 0.5)\n        if (this.dimensions.HEIGHT - assumedHeight) this.scale.HEIGHT = Math.abs(this.dimensions.HEIGHT - assumedHeight) / assumedHeight * this.customScale\n        else this.scale.HEIGHT = this.customScale\n        // console.log({ scale: this.scale })\n    }\n    updateSvgWidthScale() {\n        let assumedWidth = binaryFloor(this.dimensions.WIDTH * 0.5)\n        if (this.dimensions.WIDTH - assumedWidth) this.scale.WIDTH = Math.abs(this.dimensions.WIDTH - assumedWidth) / assumedWidth * this.customScale\n        else this.scale.WIDTH = this.customScale\n        // console.log({ scale: this.scale })\n    }\n    destroy() {\n        this.clear()\n        this.graph.remove();\n        this.graph = null;\n    }\n}","import { SvgHandler } from \"../../SvgHandler\";\nimport { idman } from '../../utils/idman';\n\nexport class BarSvgHandler extends SvgHandler {\n    constructor(canvasId, dimensions, scale = 1) {\n        super(canvasId, dimensions, scale)\n        this.BAR_PADDING = 1\n    }\n    init(style) {\n        const { canvasId, customScale, dimensions, d3 } = this\n        this.graph = d3.select('#' + canvasId)\n            .append('svg')\n            .attr('height', dimensions.HEIGHT)\n            .attr('width', dimensions.WIDTH)\n            .attr('class', 'my-1')\n            .attr('style', style)\n            .attr('id', \"bar_\" + canvasId + \"_\" + idman.next());\n    }\n    update(frequencies, opacity = 1) {\n        const { BAR_PADDING, dimensions, graph, scale } = this\n        graph.selectAll('rect')\n            .data(frequencies)\n            .enter()\n            .append('rect')\n            // .attr('fill-opacity', function (d) {\n            //     return opacity\n            // })\n            .attr('fill', function (d) {\n                return \"#000\"\n            })\n            .attr('width', dimensions.WIDTH / frequencies.length - BAR_PADDING)\n            .attr('x', function (d, i) {\n                return i * ((dimensions.WIDTH * scale.WIDTH) / frequencies.length);\n                // return i * (dimensions.WIDTH / frequencies.length);\n            })\n        graph.selectAll('rect')\n            .data(frequencies)\n            .attr('y', function (d, i) {\n                return dimensions.HEIGHT - (d * scale.HEIGHT)\n            })\n            .attr('height', function (d, i) {\n                return (d * scale.HEIGHT)\n            });\n    }\n}\n","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport Constants from \"../../Constants\";\r\nimport { idman } from '../../utils/idman';\r\nconst initialDimensions = Constants.DEFAULT_DIMENSIONS\r\nconst playingStatus = Constants.PLAYING_STATUS\r\nimport { BarSvgHandler } from \"./BarSvgHandler\";\r\nimport barStyle from \"./Bar.module.css\"\r\n\r\nexport default function Bar({\r\n    audioUrl,\r\n    onEnded,\r\n    loop = false,\r\n    coverArtUrl,\r\n    width,\r\n    height,\r\n    controls = false,\r\n    muted = false,\r\n    volume = 0.8,\r\n    scale = 1,\r\n    opacity }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [prevAudioUrl, setPrevAudioUrl] = useState(\"\")\r\n    const [isPlaying, setIsPlaying] = useState(playingStatus.STOPPED)\r\n    const [canvasId, setCanvasId] = useState(idman.next())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isMute, muteAudio] = useState(false)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    // WIDTH: binaryFloor(width)\r\n                    WIDTH: width\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (controls) {\r\n                if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: height\r\n                        }\r\n                    });\r\n                } else {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height, controls])\r\n\r\n    useEffect(() => {\r\n        if (audioSrcRef.current && audioContextRef.current) {\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n            else audioSrcRef.current.disconnect(audioContextRef.current.destination);\r\n        }\r\n    }, [isMute])\r\n\r\n    useEffect(() => {\r\n        muteAudio(muted)\r\n    }, [muted])\r\n\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume\r\n    }, [volume])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying == playingStatus.PLAYING) play()\r\n    }, [audioUrl])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.clear()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n    const updateSvg = (frequencies) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.update(frequencies, opacity)\r\n        }\r\n    }\r\n\r\n    const createSvg = (frequencies) => {\r\n        // console.log(\"creating visualization graph \", { d3 })\r\n        if (!svgRef.current) {\r\n            svgRef.current = new BarSvgHandler(canvasId, dimensions, scale)\r\n            svgRef.current.init()\r\n        }\r\n\r\n        const updateFrequencyData = () => {\r\n            try {\r\n                if (!audioRef.current || audioRef.current.paused) {\r\n                    cancelAnimationFrame(updateFrequencyData)\r\n                    // return;\r\n                } else {\r\n                    requestAnimationFrame(updateFrequencyData)\r\n                    updateSvg(frequencies)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n        updateFrequencyData()\r\n\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            if (!audioUrl) return;\r\n            if (prevAudioUrl != audioUrl) {\r\n                if (audioRef.current.src) setPrevAudioUrl(audioRef.current.src)\r\n                else setPrevAudioUrl(audioUrl)\r\n                if (isPlaying == playingStatus.PLAYING) stop()\r\n                if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n                if (!audioRef.current) audioRef.current = new Audio(audioUrl)\r\n                else audioRef.current.src = audioUrl\r\n                audioRef.current.crossOrigin = \"anonymous\"\r\n\r\n                if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audioRef.current)\r\n\r\n                // audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n                audioRef.current.volume = volume\r\n                audioRef.current.load()\r\n                audioRef.current.onended = (event) => {\r\n                    clearSvg();\r\n                    if (loop) play();\r\n                    else if (typeof onEnded == \"function\") {\r\n                        setIsPlaying(playingStatus.STOPPED);\r\n                        onEnded();\r\n                    }\r\n                }\r\n                analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n                audioSrcRef.current.connect(analyserRef.current);\r\n                if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            }\r\n\r\n            setIsPlaying(playingStatus.PLAYING)\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            audioRef.current.play()\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const pause = () => {\r\n        setIsPlaying(playingStatus.PAUSED)\r\n        audioRef.current.pause()\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(playingStatus.STOPPED)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        muteAudio(!isMute)\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            className={\" \".concat(barStyle.tarangContainer, \" \", \"tarang-bar\")}\r\n            style={{\r\n                width: (dimensions.WIDTH),\r\n                height: isControlsVisible ? ((dimensions.HEIGHT) + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT,\r\n                backgroundImage: `linear-gradient(to bottom, #aaa6, #aaad), url(${coverArtUrl})`,\r\n            }}>\r\n            <div className={barStyle.tarangSvgContainer} id={canvasId} style={{\r\n                width: dimensions.WIDTH,\r\n                height: dimensions.HEIGHT\r\n            }}>\r\n            </div>\r\n            {isControlsVisible ? <div className={barStyle.tarangContorlsContainer} style={{ height: dimensions.CONTROLS_HEIGHT }}>\r\n                {isPlaying != playingStatus.PLAYING ? <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlPlay)} onClick={play}>Play</button> : null}\r\n                {isPlaying == playingStatus.PLAYING ? <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlStop)} onClick={pause}>Pause</button> : null}\r\n                <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlStop)} onClick={stop}>Stop</button>\r\n                <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlMute)} onClick={toggleMute}>{isMute ? \"Unmute\" : \"Mute\"}</button>\r\n            </div> : null}\r\n        </div>\r\n    </>\r\n}","import { SvgHandler } from \"../../SvgHandler\";\nimport { idman } from '../../utils/idman';\n\nexport class LineSvgHandler extends SvgHandler {\n    constructor(canvasId, dimensions, scale = 1) {\n        super(canvasId, dimensions, scale)\n    }\n    init(background) {\n        const { canvasId, customScale, dimensions, d3 } = this\n        this.graph = d3.select('#' + canvasId)\n            .append('svg')\n            .attr('height', dimensions.HEIGHT)\n            .attr('width', dimensions.WIDTH)\n            .attr('class', 'my-1')\n            .attr('style', `${background}`)\n            .attr('id', \"line_\" + canvasId + \"_\" + idman.next());\n    }\n    update(frequencies, opacity) {\n        const { dimensions, d3, graph, scale } = this\n        this.clear()\n        var lineFunc = d3.line()\n            .x(function (d, i) {\n                // return i * dimensions.WIDTH / frequencies.length;\n                return i * dimensions.WIDTH * scale.WIDTH / frequencies.length;\n            })\n            .y(function (d) {\n                return dimensions.HEIGHT - (d * scale.HEIGHT);\n            })\n        graph.append('path')\n            .attr('d', lineFunc(frequencies))\n            .attr('stroke', 'black')\n            // .attr('fill-opacity', opacity)\n            .attr('fill', 'none')\n    }\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport Constants from \"../../Constants\";\r\nimport { idman } from '../../utils/idman';\r\nconst initialDimensions = Constants.DEFAULT_DIMENSIONS\r\nconst playingStatus = Constants.PLAYING_STATUS\r\nimport { LineSvgHandler } from \"./LineSvgHandler\";\r\nimport lineStyle from \"./Line.module.css\"\r\n\r\nexport default function Line({\r\n    audioUrl,\r\n    onEnded,\r\n    loop = false,\r\n    coverArtUrl,\r\n    width,\r\n    height,\r\n    controls = false,\r\n    muted = false,\r\n    volume = 0.8,\r\n    scale = 1,\r\n    opacity }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [prevAudioUrl, setPrevAudioUrl] = useState(\"\")\r\n    const [isPlaying, setIsPlaying] = useState(playingStatus.STOPPED)\r\n    const [canvasId, setCanvasId] = useState(idman.next())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const [isMute, muteAudio] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    // WIDTH: binaryFloor(width)\r\n                    WIDTH: width\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (controls) {\r\n                if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: height\r\n                        }\r\n                    });\r\n                } else {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height, controls])\r\n\r\n    useEffect(() => {\r\n        if (audioSrcRef.current && audioContextRef.current) {\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n            else audioSrcRef.current.disconnect(audioContextRef.current.destination);\r\n        }\r\n    }, [isMute])\r\n\r\n    useEffect(() => {\r\n        muteAudio(muted)\r\n    }, [muted])\r\n\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume\r\n    }, [volume])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying == playingStatus.PLAYING) play()\r\n    }, [audioUrl])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.clear()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n\r\n    const updateSvg = (frequencies) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.update(frequencies, opacity)\r\n        }\r\n    }\r\n\r\n    const createSvg = (frequencies) => {\r\n        // console.log(\"creating visualization graph \", { d3 })\r\n        if (!svgRef.current) {\r\n            svgRef.current = new LineSvgHandler(canvasId, dimensions, scale)\r\n            svgRef.current.init()\r\n        }\r\n\r\n        const updateFrequencyData = () => {\r\n            try {\r\n                if (!audioRef.current || audioRef.current.paused) {\r\n                    cancelAnimationFrame(updateFrequencyData)\r\n                    // return;\r\n                } else {\r\n                    requestAnimationFrame(updateFrequencyData)\r\n                    updateSvg(frequencies)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n        updateFrequencyData()\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            if (!audioUrl) return;\r\n            if (prevAudioUrl != audioUrl) {\r\n                if (audioRef.current.src) setPrevAudioUrl(audioRef.current.src)\r\n                else setPrevAudioUrl(audioUrl)\r\n                if (isPlaying == playingStatus.PLAYING) stop()\r\n                if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n                if (!audioRef.current) audioRef.current = new Audio(audioUrl)\r\n                else audioRef.current.src = audioUrl\r\n                audioRef.current.crossOrigin = \"anonymous\"\r\n\r\n                if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audioRef.current)\r\n\r\n                // audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n                audioRef.current.volume = volume\r\n                audioRef.current.load()\r\n                audioRef.current.onended = (event) => {\r\n                    clearSvg();\r\n                    if (loop) play()\r\n                    if (typeof onEnded == \"function\") {\r\n                        setIsPlaying(playingStatus.STOPPED);\r\n                        onEnded();\r\n                    }\r\n                }\r\n                analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n                audioSrcRef.current.connect(analyserRef.current);\r\n                if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            }\r\n\r\n            setIsPlaying(playingStatus.PLAYING)\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            audioRef.current.play()\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const pause = () => {\r\n        setIsPlaying(playingStatus.PAUSED)\r\n        audioRef.current.pause()\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(playingStatus.STOPPED)\r\n        audioRef.current.pause()\r\n        clearSvg()\r\n        audioRef.current.currentTime = 0\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        muteAudio(!isMute)\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            className={\" \".concat(lineStyle.tarangContainer, \" \", \"tarang-line\")}\r\n            style={{\r\n                width: dimensions.WIDTH,\r\n                height: isControlsVisible ? ((dimensions.HEIGHT) + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT,\r\n                background: `linear-gradient(to bottom, #aaa6, #aaad), url(${coverArtUrl})`,\r\n            }}>\r\n            <div className={lineStyle.tarangSvgContainer} id={canvasId} style={{\r\n                width: dimensions.WIDTH,\r\n                height: dimensions.HEIGHT,\r\n            }}>\r\n            </div>\r\n            {isControlsVisible ? <div className={lineStyle.tarangContorlsContainer} style={{ height: dimensions.CONTROLS_HEIGHT }}>\r\n                {isPlaying != playingStatus.PLAYING ? <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlPlay)} onClick={play}>Play</button> : null}\r\n                {isPlaying == playingStatus.PLAYING ? <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlPlay)} onClick={pause}>Pause</button> : null}\r\n                <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlStop)} onClick={stop}>Stop</button>\r\n                <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlMute)} onClick={toggleMute}>{isMute ? \"Unmute\" : \"Mute\"}</button>\r\n            </div> : null}\r\n        </div>\r\n    </>\r\n}","import binaryCeil from \"./lib/utils/binaryCeil\"\nimport binaryFloor from \"./lib/utils/binaryFloor\"\nimport constants from \"./lib/Constants\"\nimport { SvgHandler } from \"./lib/SvgHandler\"\nimport Bar from \"./lib/components/Bar/Bar\"\nimport Line from \"./lib/components/Line/Line\"\n\nexport const Tarang = {\n  Bar,\n  Line,\n  utils: {\n    binaryCeil,\n    binaryFloor\n  },\n  SvgHandler,\n  ...constants\n}\n","function binaryCeil(number) {\n    let returnValue = 1\n    do {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    } while (number / 2 > 0)\n    return returnValue;\n}\n\nexport default binaryCeil;","import React from 'react'\nconst Npm = () => {\n    return (\n        <a href=\"https://www.npmjs.com/package/tarang\">npm</a>\n    )\n}\nexport default Npm;","import React from 'react'\nconst Readme = () => {\n    return (\n        <a href=\"https://github.com/kamalyesh/tarang/blob/master/README.md\">README</a>\n    )\n}\nexport default Readme;","import React, { useState } from 'react'\nimport { Tarang } from 'tarang'\nimport 'tarang/dist/index.css'\nimport Npm from './Npm'\nimport Readme from './Readme'\n\nconst Example = () => {\n    const initialSrcArray = [\n        {\n            audioUrl: \"https://tarang.surge.sh/audio/example.mp3\",\n            coverArtUrl: \"https://tarang.surge.sh/images/example-cover.png\"\n            // audioUrl: \"http://192.168.1.23:8080/audio/example.mp3\",\n            // coverArtUrl: \"http://192.168.1.23:8080/images/example-cover.png\"\n        }\n    ]\n\n    const DEFAULT_SRC = 0\n    const [srcArray, updateSrcArray] = useState([...initialSrcArray])\n    const [src, updateSrc] = useState(DEFAULT_SRC)\n    const [newAudioUrl, setNewAudioUrl] = useState('')\n    const [newCoverArtUrl, setNewCoverArtUrl] = useState('')\n    const [lineControlsVisible, setLineControlsVisible] = useState(true)\n    const [barControlsVisible, setBarControlsVisible] = useState(true)\n    // const [lineDimensionsFormValues, setLineDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n    // const [barDimensionsFormValues, setBarDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n    const [lineDimensions, setLineDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n    const [barDimensions, setBarDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n    const [lineVisualizationUpdating, setLineVisualizationUpdating] = useState(false)\n    const [barVisualizationUpdating, setBarVisualizationUpdating] = useState(false)\n\n    const reset = () => { updateSrcArray([initialSrcArray[0]]); updateSrc(DEFAULT_SRC); setNewAudioUrl(''); setNewCoverArtUrl(''); }\n    const setSrc = (index) => { updateSrc(index) }\n    const updateNewAudio = () => {\n        if (newAudioUrl) {\n            updateSrcArray(srcArray.concat([{ audioUrl: newAudioUrl, coverArtUrl: newCoverArtUrl || \"#\" }]))\n        }\n    }\n\n    const getFileName = (url) => {\n        let src = url.split(\"/\");\n        return src.length ? src[src.length - 1] : src;\n    }\n\n    // const updateLineVisualization = () => {\n    //   setLineVisualizationUpdating(true)\n    //   setLineDimensions(lineDimensionsFormValues)\n    //   setTimeout(() => {\n    //     setLineVisualizationUpdating(false)\n    //   }, [100])\n    // }\n\n    // const updateBarVisualization = () => {\n    //   setBarVisualizationUpdating(true)\n    //   setBarDimensions(barDimensionsFormValues)\n    //   setTimeout(() => {\n    //     setBarVisualizationUpdating(false)\n    //   }, [100])\n    // }\n\n    return (\n        <section>\n            <table>\n                <thead>\n                    <tr>\n                        <td>\n                            <legend>Playlist</legend>\n                            <table style={{ position: 'relative', width: \"400px\", height: \"fit-content\" }}>\n                                <tbody>\n                                    {\n                                        srcArray.map((srcItem, srcIndex) => <tr key={JSON.stringify(srcItem).length + \"_\" + srcIndex} style={{ \"textDecoration\": \"link\", \"cursor\": \"pointer\" }}>\n                                            <td>\n                                                <button onClick={() => setSrc(srcIndex)}>{getFileName(srcItem.audioUrl)}</button>\n                                            </td>\n                                        </tr>) || null\n                                    }\n                                    <tr>\n                                        <td style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                                            <input style={{ width: \"90%\", display: \"block\" }} type=\"url\" value={newAudioUrl} onChange={(e) => setNewAudioUrl(e.target.value)} placeholder=\"Enter mp3 url\" />\n                                            <input style={{ width: \"90%\", display: \"block\" }} type=\"url\" value={newCoverArtUrl} onChange={(e) => setNewCoverArtUrl(e.target.value)} placeholder=\"Enter cover art url\" />\n                                        </td>\n                                        <td style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                                            <button type=\"button\" onClick={updateNewAudio} style={{ display: \"block\" }}>Set</button>\n                                            <button onClick={reset} style={{ display: \"block\" }}>Reset</button>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Readme />\n                                        </td>\n                                        <td>\n                                            <Npm />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            <legend>Now Playing</legend>\n                            <table style={{ position: 'relative', width: \"400px\", height: \"100px\", maxHeight: \"300px\", overflowY: \"scroll\" }}>\n                                <tbody>\n                                    <tr>\n                                        <th>\n                                            {getFileName(srcArray[src].audioUrl)}\n                                        </th>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <legend>Virtualization as Line Graph</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"line-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n                                                title={JSON.stringify({\n                                                    width: lineDimensions.WIDTH,\n                                                    height: lineDimensions.HEIGHT,\n                                                    controls: lineControlsVisible,\n                                                    audioUrl: srcArray[src].audioUrl,\n                                                    coverArtUrl: srcArray[src].coverArtUrl,\n                                                    scale: 0.7,\n                                                }, null, 4)}>\n                                                {\n                                                    lineVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Line\n                                                            width={lineDimensions.WIDTH}\n                                                            height={lineDimensions.HEIGHT}\n                                                            controls={lineControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={0.7}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                        <td>\n                            <legend>Virtualization as Bar Graph</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"bar-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n                                                title={JSON.stringify({\n                                                    width: barDimensions.WIDTH,\n                                                    height: barDimensions.HEIGHT,\n                                                    controls: barControlsVisible,\n                                                    audioUrl: srcArray[src].audioUrl,\n                                                    coverArtUrl: srcArray[src].coverArtUrl,\n                                                    scale: 0.7,\n                                                }, null, 4)}>\n                                                {\n                                                    barVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Bar\n                                                            width={barDimensions.WIDTH}\n                                                            height={barDimensions.HEIGHT}\n                                                            controls={barControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={0.7}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <legend>Virtualization as Line Graph (halved)</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"line-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n                                                style={{ float: \"right\" }}\n                                                title={\n                                                    JSON.stringify({\n                                                        width: lineDimensions.WIDTH,\n                                                        height: lineDimensions.HEIGHT / 2,\n                                                        controls: lineControlsVisible,\n                                                        audioUrl: srcArray[src].audioUrl,\n                                                        coverArtUrl: srcArray[src].coverArtUrl,\n                                                        scale: 0.5,\n                                                    }, null, 4)}>\n                                                {\n                                                    lineVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Line\n                                                            width={lineDimensions.WIDTH}\n                                                            height={lineDimensions.HEIGHT / 2}\n                                                            controls={lineControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={0.5}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                        <td>\n                            <legend>Virtualization as Bar Graph (halved)</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"bar-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div title={JSON.stringify({\n                                                width: barDimensions.WIDTH,\n                                                height: barDimensions.HEIGHT / 2,\n                                                controls: barControlsVisible,\n                                                audioUrl: srcArray[src].audioUrl,\n                                                coverArtUrl: srcArray[src].coverArtUrl,\n                                                scale: 0.5\n                                            }, null, 4)}>\n                                                {\n                                                    barVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Bar\n                                                            width={barDimensions.WIDTH}\n                                                            height={barDimensions.HEIGHT / 2}\n                                                            controls={barControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={0.5}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <legend>Virtualization as Line Graph (scaled)</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"line-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n\n                                                title={JSON.stringify({\n                                                    width: lineDimensions.WIDTH,\n                                                    controls: lineControlsVisible,\n                                                    audioUrl: srcArray[src].audioUrl,\n                                                    coverArtUrl: srcArray[src].coverArtUrl,\n                                                    scale: 1.1,\n                                                }, null, 4)}>\n                                                {\n                                                    lineVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Line\n                                                            width={lineDimensions.WIDTH}\n                                                            controls={lineControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={1.1}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                        <td>\n                            <legend>Virtualization as Bar Graph (scaled)</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"bar-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n\n                                                title={JSON.stringify({\n                                                    width: barDimensions.WIDTH,\n                                                    controls: barControlsVisible,\n                                                    audioUrl: srcArray[src].audioUrl,\n                                                    coverArtUrl: srcArray[src].coverArtUrl,\n                                                    scale: 1.1,\n                                                }, null, 4)}>\n                                                {\n                                                    barVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Bar\n                                                            width={barDimensions.WIDTH}\n                                                            controls={barControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={1.1}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <legend>Virtualization as Line Graph (on loop - please note that loop and onEnded are mutually exclusive)</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"line-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n\n                                                title={JSON.stringify({\n                                                    loop: true,\n                                                    width: lineDimensions.WIDTH,\n                                                    controls: lineControlsVisible,\n                                                    audioUrl: srcArray[src].audioUrl,\n                                                    coverArtUrl: srcArray[src].coverArtUrl,\n                                                    scale: 1.1,\n                                                }, null, 4)}>\n                                                {\n                                                    lineVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Line\n                                                            loop={true}\n                                                            width={lineDimensions.WIDTH}\n                                                            controls={lineControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={1.1}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                        <td>\n                            <legend>Virtualization as Bar Graph (event on end - please note that loop and onEnded are mutually exclusive)</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <label htmlFor=\"bar-control\">Show Controls\n                                                <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                                            </label>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div\n                                                title={JSON.stringify({\n                                                    onEnded: `{() => alert(\"song ended\")}`,\n                                                    width: barDimensions.WIDTH,\n                                                    controls: barControlsVisible,\n                                                    audioUrl: srcArray[src].audioUrl,\n                                                    coverArtUrl: srcArray[src].coverArtUrl,\n                                                    scale: 1.1,\n                                                }, null, 4)}>\n                                                {\n                                                    barVisualizationUpdating ?\n                                                        null :\n                                                        <Tarang.Bar\n                                                            onEnded={() => alert(\"song ended\")}\n                                                            width={barDimensions.WIDTH}\n                                                            controls={barControlsVisible}\n                                                            audioUrl={srcArray[src].audioUrl}\n                                                            coverArtUrl={srcArray[src].coverArtUrl}\n                                                            scale={1.1}\n                                                        />\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                                </tbody>\n                            </table>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n}\n\nexport default Example;","import React from 'react'\nimport Example from './Example'\n\nconst App = () => {\n  return (\n    <div className=\"App\" style={{ backgroundColor: 'lightsteelblue' }}>\n      <Example />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}