{"version":3,"sources":["../../src/lib/utils/binaryFloor.js","../../src/lib/Constants.js","../../src/lib/SvgHandler.js","../../src/lib/components/Bar.js","../../src/lib/components/Line.js","../../src/index.js","../../src/lib/utils/binaryCeil.js","App.js","index.js"],"names":["binaryFloor","number","returnValue","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","CONTROLS_HEIGHT","Object","DEFAULT_DIMENSIONS_SCALE","getNextId","idman","SvgHandler","dimensions","Constants","scale","this","canvasId","Error","d3","init","update","clear","updateSvgHeightScale","assumedHeight","parseInt","Math","console","updateSvgWidthScale","assumedWidth","destroy","initialDimensions","constants","BarSvgHandler","BAR_PADDING","graph","d","frequencies","i","LineSvgHandler","lineFunc","Tarang","Bar","audioUrl","coverArtUrl","width","height","controls","muted","volume","opacity","useState","isPlaying","setIsPlaying","setDimensions","isMute","muteAudio","isControlsVisible","setIsControlsVisible","audioRef","useRef","audioContextRef","audioSrcRef","analyserRef","svgRef","useEffect","clearSvg","isNaN","newDimensions","createSvg","updateFrequencyData","cancelAnimationFrame","requestAnimationFrame","updateSvg","error","play","window","audio","Audio","bufferLength","Uint8Array","stop","focusIn","focusOut","onMouseEnter","onFocus","onPointerEnter","onMouseLeave","onBlur","onPointerLeave","className","style","background","id","position","top","bottom","left","right","overflow","onClick","Line","utils","binaryCeil","App","initialSrcArray","srcArray","updateSrcArray","src","updateSrc","newAudioUrl","setNewAudioUrl","newCoverArtUrl","setNewCoverArtUrl","lineControlsVisible","setLineControlsVisible","barControlsVisible","setBarControlsVisible","lineDimensions","setLineDimensions","barDimensions","setBarDimensions","lineVisualizationUpdating","setLineVisualizationUpdating","barVisualizationUpdating","setBarVisualizationUpdating","getFileName","url","split","length","backgroundColor","map","srcItem","srcIndex","key","JSON","stringify","display","flexWrap","type","value","onChange","e","target","placeholder","concat","maxHeight","overflowY","htmlFor","checked","title","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f15ed6ff.chunk.js","sourcesContent":["function binaryFloor(number) {\n    let returnValue = 1\n    while (number / 2 > 1) {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    }\n    // console.log('returnValue', returnValue)\n    return returnValue;\n}\n\nexport default binaryFloor;\n","const DEFAULT_DIMENSIONS = { WIDTH: 256, HEIGHT: 256, CONTROLS_HEIGHT: 30 }\nObject.freeze(DEFAULT_DIMENSIONS)\n\nconst DEFAULT_DIMENSIONS_SCALE = { WIDTH: 1, HEIGHT: 1 }\nObject.freeze(DEFAULT_DIMENSIONS_SCALE)\n\nexport default {\n    DEFAULT_DIMENSIONS, DEFAULT_DIMENSIONS_SCALE\n}","import * as d3 from 'd3'\nimport idman from 'idman';\nconst { getNextId } = idman;\nimport Constants from './Constants';\nimport binaryFloor from './utils/binaryFloor';\n\nexport class SvgHandler {\n    constructor(canvasId, dimensions = { ...Constants.DEFAULT_DIMENSIONS }, scale = 1) {\n        if (canvasId) this.canvasId = canvasId\n        else this.canvasId = getNextId()\n        this.customScale = scale\n        this.scale = { ...Constants.DEFAULT_DIMENSIONS_SCALE }\n        if (dimensions) {\n            this.dimensions = dimensions\n            this.updateSvgWidthScale()\n            this.updateSvgHeightScale()\n        }\n        this.graph = null;\n        if (!d3) throw new Error(\"d3 is not found. Tarang may not behave as expected.\")\n        else this.d3 = d3\n    }\n    init() {\n    }\n    update() {\n    }\n    clear() {\n        if (this.graph) {\n            this.graph.selectAll(\"*\").remove()\n        }\n    }\n    updateSvgHeightScale() {\n        let assumedHeight = parseInt(this.dimensions.WIDTH * 0.5)\n        if (this.dimensions.HEIGHT - assumedHeight) this.scale.HEIGHT = Math.abs(this.dimensions.HEIGHT - assumedHeight) / assumedHeight * this.customScale\n        else this.scale.HEIGHT = this.customScale\n        console.log({ scale: this.scale })\n    }\n    updateSvgWidthScale() {\n        let assumedWidth = binaryFloor(this.dimensions.WIDTH * 0.5)\n        if (this.dimensions.WIDTH - assumedWidth) this.scale.WIDTH = Math.abs(this.dimensions.WIDTH - assumedWidth) / assumedWidth * this.customScale\n        else this.scale.WIDTH = this.customScale\n        console.log({ scale: this.scale })\n    }\n    destroy() {\n        this.clear()\n        this.graph.remove();\n        this.graph = null;\n    }\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport binaryFloor from \"../utils/binaryFloor\";\r\nimport constants from \"../Constants\";\r\nconst initialDimensions = constants.DEFAULT_DIMENSIONS\r\nimport idman from 'idman';\r\nimport { SvgHandler } from \"../SvgHandler\";\r\nconst { getNextId } = idman;\r\n\r\nclass BarSvgHandler extends SvgHandler {\r\n    constructor(canvasId, dimensions, scale = 1) {\r\n        super(canvasId, dimensions, scale)\r\n        this.BAR_PADDING = 1\r\n    }\r\n    init(style) {\r\n        const { canvasId, customScale, dimensions, d3 } = this\r\n        this.graph = d3.select('#' + canvasId)\r\n            .append('svg')\r\n            .attr('height', dimensions.HEIGHT)\r\n            .attr('width', dimensions.WIDTH)\r\n            .attr('class', 'my-1')\r\n            .attr('style', style)\r\n            .attr('id', \"bar_\" + canvasId + \"_\" + getNextId());\r\n    }\r\n    update(frequencies, opacity = 1) {\r\n        const { BAR_PADDING, dimensions, graph, scale } = this\r\n        graph.selectAll('rect')\r\n            .data(frequencies)\r\n            .enter()\r\n            .append('rect')\r\n            // .attr('fill-opacity', function (d) {\r\n            //     return opacity\r\n            // })\r\n            .attr('fill', function (d) {\r\n                return \"#000\"\r\n            })\r\n            .attr('width', dimensions.WIDTH / frequencies.length - BAR_PADDING)\r\n            .attr('x', function (d, i) {\r\n                return i * ((dimensions.WIDTH * scale.WIDTH) / frequencies.length);\r\n                // return i * (dimensions.WIDTH / frequencies.length);\r\n            })\r\n        graph.selectAll('rect')\r\n            .data(frequencies)\r\n            .attr('y', function (d, i) {\r\n                return dimensions.HEIGHT - (d * scale.HEIGHT)\r\n            })\r\n            .attr('height', function (d, i) {\r\n                return (d * scale.HEIGHT)\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport default function Bar({ audioUrl, coverArtUrl, width, height, controls = false, muted = false, volume = 0.8, scale = 1, opacity }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [canvasId, setCanvasId] = useState(getNextId())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isMute, muteAudio] = useState(false)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    // WIDTH: binaryFloor(width)\r\n                    WIDTH: width\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height])\r\n\r\n    useEffect(() => {\r\n        if (audioSrcRef.current && audioContextRef.current) {\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n            else audioSrcRef.current.disconnect(audioContextRef.current.destination);\r\n        }\r\n    }, [isMute])\r\n\r\n    useEffect(() => {\r\n        muteAudio(muted)\r\n    }, [muted])\r\n\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume\r\n    }, [volume])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.clear()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n    const updateSvg = (frequencies) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.update(frequencies, opacity)\r\n        }\r\n    }\r\n\r\n    const createSvg = (frequencies) => {\r\n        // console.log(\"creating visualization graph \", { d3 })\r\n        if (!svgRef.current) {\r\n            svgRef.current = new BarSvgHandler(canvasId, dimensions, scale)\r\n            svgRef.current.init()\r\n        }\r\n\r\n        const updateFrequencyData = () => {\r\n            try {\r\n                if (!audioRef.current || audioRef.current.paused) {\r\n                    cancelAnimationFrame(updateFrequencyData)\r\n                    // return;\r\n                } else {\r\n                    requestAnimationFrame(updateFrequencyData)\r\n                    updateSvg(frequencies)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n        updateFrequencyData()\r\n\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            setIsPlaying(true)\r\n            if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n            let audio = new Audio(audioUrl)\r\n            audio.crossOrigin = \"anonymous\"\r\n\r\n            if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audio)\r\n            else audioRef.current = audio\r\n            audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n            audioRef.current.volume = volume\r\n            audioRef.current.load()\r\n            audioRef.current.play()\r\n            audioRef.current.onended = (event) => clearSvg()\r\n            analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n            audioSrcRef.current.connect(analyserRef.current);\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        muteAudio(!isMute)\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            className=\"tarang-bar tarang-container\"\r\n            style={{\r\n                width: (dimensions.WIDTH),\r\n                height: isControlsVisible ? ((dimensions.HEIGHT) + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT * scale.HEIGHT,\r\n                background: `linear-gradient(to bottom, #aaa6, #aaad)`,\r\n                background: `linear-gradient(to bottom, #aaa6, #aaad), url(${coverArtUrl})`,\r\n            }}>\r\n            <div id={canvasId} style={{ \"flex\": 1, position: \"absolute\", top: 0, bottom: 0, left: 0, right: 0, overflow: 'hidden' }}>\r\n            </div>\r\n            {\r\n                isControlsVisible ?\r\n                    <div style={{ \"flex\": 1, position: \"absolute\", height: dimensions.CONTROLS_HEIGHT, bottom: 0, left: 0, right: 0 }} >\r\n                        <button onClick={play}>Play</button>\r\n                        <button onClick={stop}>Stop</button>\r\n                        <button onClick={toggleMute}>{isMute ? \"Unmute\" : \"Mute\"}</button>\r\n                    </div> : <>\r\n                    </>\r\n            }\r\n        </div>\r\n    </>\r\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport binaryFloor from \"../utils/binaryFloor\";\r\nimport constants from \"../Constants\";\r\nconst initialDimensions = constants.DEFAULT_DIMENSIONS\r\nimport idman from 'idman';\r\nimport { SvgHandler } from \"../SvgHandler\";\r\nconst { getNextId } = idman;\r\n\r\nclass LineSvgHandler extends SvgHandler {\r\n    constructor(canvasId, dimensions, scale = 1) {\r\n        super(canvasId, dimensions, scale)\r\n    }\r\n    init(background) {\r\n        const { canvasId, customScale, dimensions, d3 } = this\r\n        this.graph = d3.select('#' + canvasId)\r\n            .append('svg')\r\n            .attr('height', dimensions.HEIGHT)\r\n            .attr('width', dimensions.WIDTH)\r\n            .attr('class', 'my-1')\r\n            .attr('style', `${background}`)\r\n            .attr('id', \"line_\" + canvasId + \"_\" + getNextId());\r\n    }\r\n    update(frequencies, opacity) {\r\n        const { dimensions, d3, graph, scale } = this\r\n        this.clear()\r\n        var lineFunc = d3.line()\r\n            .x(function (d, i) {\r\n                // return i * dimensions.WIDTH / frequencies.length;\r\n                return i * dimensions.WIDTH * scale.WIDTH / frequencies.length;\r\n            })\r\n            .y(function (d) {\r\n                return dimensions.HEIGHT - (d * scale.HEIGHT);\r\n            })\r\n        graph.append('path')\r\n            .attr('d', lineFunc(frequencies))\r\n            .attr('stroke', 'black')\r\n            // .attr('fill-opacity', opacity)\r\n            .attr('fill', 'none')\r\n    }\r\n}\r\n\r\nexport default function Line({ audioUrl, coverArtUrl, width, height, controls = false, muted = false, volume = 0.8, scale = 1, opacity }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [canvasId, setCanvasId] = useState(getNextId())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const [isMute, muteAudio] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    WIDTH: binaryFloor(width)\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height])\r\n\r\n    useEffect(() => {\r\n        if (audioSrcRef.current && audioContextRef.current) {\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n            else audioSrcRef.current.disconnect(audioContextRef.current.destination);\r\n        }\r\n    }, [isMute])\r\n\r\n    useEffect(() => {\r\n        muteAudio(muted)\r\n    }, [muted])\r\n\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume\r\n    }, [volume])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.clear()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n\r\n    const updateSvg = (frequencies) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.update(frequencies, opacity)\r\n        }\r\n    }\r\n\r\n    const createSvg = (frequencies) => {\r\n        // console.log(\"creating visualization graph \", { d3 })\r\n        if (!svgRef.current) {\r\n            svgRef.current = new LineSvgHandler(canvasId, dimensions, scale)\r\n            svgRef.current.init()\r\n        }\r\n\r\n        const updateFrequencyData = () => {\r\n            try {\r\n                if (!audioRef.current || audioRef.current.paused) {\r\n                    cancelAnimationFrame(updateFrequencyData)\r\n                    // return;\r\n                } else {\r\n                    requestAnimationFrame(updateFrequencyData)\r\n                    updateSvg(frequencies)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n        updateFrequencyData()\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            setIsPlaying(true)\r\n            if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n            let audio = new Audio(audioUrl)\r\n            audio.crossOrigin = \"anonymous\"\r\n\r\n            if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audio)\r\n            else audioRef.current = audio\r\n\r\n            audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n            audioRef.current.volume = volume\r\n            audioRef.current.load()\r\n            audioRef.current.play()\r\n            audioRef.current.onended = (event) => clearSvg()\r\n            analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n            audioSrcRef.current.connect(analyserRef.current);\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        muteAudio(!isMute)\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n            \r\n            className=\"tarang-line tarang-container\"\r\n            style={{\r\n                width: (dimensions.WIDTH),\r\n                height: isControlsVisible ? ((dimensions.HEIGHT) + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT * scale.HEIGHT,\r\n                background: `linear-gradient(to bottom, #aaa6, #aaad)`,\r\n                background: `linear-gradient(to bottom, #aaa6, #aaad), url(${coverArtUrl})`,\r\n            }}>\r\n            <div id={canvasId} style={{ \"flex\": 1, position: \"absolute\", top: 0, bottom: 0, left: 0, right: 0, overflow: 'hidden' }}>\r\n            </div>\r\n            {\r\n                isControlsVisible ?\r\n                    <div style={{ \"flex\": 1, position: \"absolute\", height: dimensions.CONTROLS_HEIGHT, bottom: 0, left: 0, right: 0 }} >\r\n                        <button onClick={play}>Play</button>\r\n                        <button onClick={stop}>Stop</button>\r\n                        <button onClick={toggleMute}>{isMute ? \"Unmute\" : \"Mute\"}</button>\r\n                    </div> : <>\r\n                    </>\r\n            }\r\n        </div>\r\n    </>\r\n}","import binaryCeil from \"./lib/utils/binaryCeil\"\nimport binaryFloor from \"./lib/utils/binaryFloor\"\nimport constants from \"./lib/Constants\"\nimport { SvgHandler } from \"./lib/SvgHandler\"\nimport Bar from \"./lib/components/Bar\"\nimport Line from \"./lib/components/Line\"\n\nexport const Tarang = {\n  Bar,\n  Line,\n  utils: {\n    binaryCeil,\n    binaryFloor\n  },\n  SvgHandler,\n  ...constants\n}\n","function binaryCeil(number) {\n    let returnValue = 1\n    do {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    } while (number / 2 > 0)\n    return returnValue;\n}\n\nexport default binaryCeil;","import React, { useState } from 'react'\n\n\nimport { Tarang } from 'tarang'\nimport 'tarang/dist/index.css'\n\nconst App = () => {\n  const initialSrcArray = [\n    {\n      audioUrl: \"https://tarang.surge.sh/audio/example.mp3\",\n      coverArtUrl: \"https://tarang.surge.sh/images/example-cover.png\"\n    }\n  ]\n\n  const DEFAULT_SRC = 0\n  const [srcArray, updateSrcArray] = useState([...initialSrcArray])\n  const [src, updateSrc] = useState(DEFAULT_SRC)\n  const [newAudioUrl, setNewAudioUrl] = useState('')\n  const [newCoverArtUrl, setNewCoverArtUrl] = useState('')\n  const [lineControlsVisible, setLineControlsVisible] = useState(true)\n  const [barControlsVisible, setBarControlsVisible] = useState(true)\n  // const [lineDimensionsFormValues, setLineDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n  // const [barDimensionsFormValues, setBarDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [lineDimensions, setLineDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [barDimensions, setBarDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [lineVisualizationUpdating, setLineVisualizationUpdating] = useState(false)\n  const [barVisualizationUpdating, setBarVisualizationUpdating] = useState(false)\n\n  const reset = () => { updateSrcArray([initialSrcArray[0]]); updateSrc(DEFAULT_SRC); setNewAudioUrl(''); setNewCoverArtUrl(''); }\n  const setSrc = (index) => { updateSrc(index) }\n  const updateNewAudio = () => {\n    if (newAudioUrl) {\n      updateSrcArray(srcArray.concat([{ audioUrl: newAudioUrl, coverArtUrl: newCoverArtUrl || \"#\" }]))\n    }\n  }\n\n  const getFileName = (url) => {\n    let src = url.split(\"/\");\n    return src.length ? src[src.length - 1] : src;\n  }\n\n  // const updateLineVisualization = () => {\n  //   setLineVisualizationUpdating(true)\n  //   setLineDimensions(lineDimensionsFormValues)\n  //   setTimeout(() => {\n  //     setLineVisualizationUpdating(false)\n  //   }, [100])\n  // }\n\n  // const updateBarVisualization = () => {\n  //   setBarVisualizationUpdating(true)\n  //   setBarDimensions(barDimensionsFormValues)\n  //   setTimeout(() => {\n  //     setBarVisualizationUpdating(false)\n  //   }, [100])\n  // }\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: 'lightsteelblue' }}>\n      <section>\n        <table>\n          <thead>\n            <tr>\n              <td>\n                <legend>Playlist</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"fit-content\" }}>\n                  <tbody>\n                    {\n                      srcArray.map((srcItem, srcIndex) => <tr key={JSON.stringify(srcItem).length + \"_\" + srcIndex} style={{ \"textDecoration\": \"link\", \"cursor\": \"pointer\" }}>\n                        <td>\n                          <button onClick={() => setSrc(srcIndex)}>{getFileName(srcItem.audioUrl)}</button>\n                        </td>\n                      </tr>) || null\n                    }\n                    <tr>\n                      <td style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                        <input style={{ width: \"90%\", display: \"block\" }} type=\"url\" value={newAudioUrl} onChange={(e) => setNewAudioUrl(e.target.value)} placeholder=\"Enter mp3 url\" />\n                        <input style={{ width: \"90%\", display: \"block\" }} type=\"url\" value={newCoverArtUrl} onChange={(e) => setNewCoverArtUrl(e.target.value)} placeholder=\"Enter cover art url\" />\n                      </td>\n                      <td style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                        <button type=\"button\" onClick={updateNewAudio} style={{ display: \"block\" }}>Set</button>\n                        <button onClick={reset} style={{ display: \"block\" }}>Reset</button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <legend>Now Playing</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"100px\", maxHeight: \"300px\", overflowY: \"scroll\" }}>\n                  <tbody>\n                    <tr>\n                      <th>\n                        {getFileName(srcArray[src].audioUrl)}\n                      </th>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}\n                          title={JSON.stringify({\n                            width: lineDimensions.WIDTH,\n                            height: lineDimensions.HEIGHT,\n                            controls: lineControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 0.7,\n                          }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                height={lineDimensions.HEIGHT}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.7}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }}\n                          title={JSON.stringify({\n                            width: barDimensions.WIDTH,\n                            height: barDimensions.HEIGHT,\n                            controls: barControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 0.7,\n                          }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                height={barDimensions.HEIGHT}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.7}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph (halved)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }} title={\n                          JSON.stringify({\n                            width: lineDimensions.WIDTH,\n                            height: lineDimensions.HEIGHT / 2,\n                            controls: lineControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 0.5,\n                          }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                height={lineDimensions.HEIGHT / 2}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.5}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph (halved)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div style={{ position: 'relative' }} title={JSON.stringify({\n                          width: barDimensions.WIDTH,\n                          height: barDimensions.HEIGHT / 2,\n                          controls: barControlsVisible,\n                          audioUrl: srcArray[src].audioUrl,\n                          coverArtUrl: srcArray[src].coverArtUrl,\n                          scale: 0.9\n                        }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                height={barDimensions.HEIGHT / 2}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.9}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph (scaled)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n                          style={{ position: 'relative' }}\n                          title={JSON.stringify({\n                            width: lineDimensions.WIDTH,\n                            controls: lineControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 1.1,\n                          }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={1.1}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph (scaled)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n                          style={{ position: 'relative' }}\n                          title={JSON.stringify({\n                            width: barDimensions.WIDTH,\n                            controls: barControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 1.1,\n                          }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={1.1}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}