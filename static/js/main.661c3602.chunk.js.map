{"version":3,"sources":["../../src/lib/utils/binaryFloor.js","../../src/lib/Constants.js","../../src/lib/utils/idman.js","../../src/lib/SvgHandler.js","../../src/lib/components/Bar/BarSvgHandler.js","../../src/lib/components/Bar/Bar.js","../../src/lib/components/Line/LineSvgHandler.js","../../src/lib/components/Line/Line.js","../../src/index.js","../../src/lib/utils/binaryCeil.js","App.js","index.js"],"names":["binaryFloor","number","returnValue","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","CONTROLS_HEIGHT","Object","DEFAULT_DIMENSIONS_SCALE","PLAYING_STATUS","PLAYING","STOPPED","PAUSED","idman","next","id_counter","getNextId","SvgHandler","dimensions","Constants","scale","this","canvasId","Error","d3","init","update","clear","updateSvgHeightScale","assumedHeight","parseInt","Math","updateSvgWidthScale","assumedWidth","destroy","BarSvgHandler","BAR_PADDING","graph","d","frequencies","i","initialDimensions","playingStatus","LineSvgHandler","lineFunc","Tarang","Bar","audioUrl","onEnded","loop","coverArtUrl","width","height","controls","muted","volume","opacity","useState","prevAudioUrl","setPrevAudioUrl","isPlaying","setIsPlaying","setDimensions","isMute","muteAudio","isControlsVisible","setIsControlsVisible","audioRef","useRef","audioContextRef","audioSrcRef","analyserRef","svgRef","useEffect","clearSvg","isNaN","newDimensions","play","createSvg","updateFrequencyData","cancelAnimationFrame","requestAnimationFrame","updateSvg","error","console","stop","window","Audio","bufferLength","Uint8Array","focusIn","focusOut","onMouseEnter","onFocus","onPointerEnter","onMouseLeave","onBlur","onPointerLeave","className","concat","barStyle","style","backgroundImage","id","onClick","Line","lineStyle","background","utils","binaryCeil","App","initialSrcArray","srcArray","updateSrcArray","src","updateSrc","newAudioUrl","setNewAudioUrl","newCoverArtUrl","setNewCoverArtUrl","lineControlsVisible","setLineControlsVisible","barControlsVisible","setBarControlsVisible","lineDimensions","setLineDimensions","barDimensions","setBarDimensions","lineVisualizationUpdating","setLineVisualizationUpdating","barVisualizationUpdating","setBarVisualizationUpdating","getFileName","url","split","length","backgroundColor","position","map","srcItem","srcIndex","key","JSON","stringify","display","flexWrap","type","value","onChange","e","target","placeholder","maxHeight","overflowY","htmlFor","checked","title","float","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.661c3602.chunk.js","sourcesContent":["function binaryFloor(number) {\n    let returnValue = 1\n    while (number / 2 > 1) {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    }\n    // console.log('returnValue', returnValue)\n    return returnValue;\n}\n\nexport default binaryFloor;\n","const DEFAULT_DIMENSIONS = { WIDTH: 256, HEIGHT: 256, CONTROLS_HEIGHT: 30 }\nObject.freeze(DEFAULT_DIMENSIONS)\n\nconst DEFAULT_DIMENSIONS_SCALE = { WIDTH: 1, HEIGHT: 1 }\nObject.freeze(DEFAULT_DIMENSIONS_SCALE)\n\nconst PLAYING_STATUS = { PLAYING: \"PLAYING\", STOPPED: \"STOPPED\", PAUSED: \"PAUSED\" }\nObject.freeze(PLAYING_STATUS)\n\nexport default {\n    DEFAULT_DIMENSIONS, DEFAULT_DIMENSIONS_SCALE, PLAYING_STATUS\n}","var { getNextId } = (function () {\n    var id_counter = 0\n    function getNextId() {\n        if (id_counter < 0) return \"id_0\"\n        else return `id_${++id_counter}`\n    }\n    return { getNextId }\n}())\n\nexport const idman = { next: getNextId }","import * as d3 from 'd3'\nimport { idman } from './utils/idman';\nimport Constants from './Constants';\nimport binaryFloor from './utils/binaryFloor';\n\nexport class SvgHandler {\n    constructor(canvasId, dimensions = { ...Constants.DEFAULT_DIMENSIONS }, scale = 1) {\n        if (canvasId) this.canvasId = canvasId\n        else this.canvasId = idman.next()\n        this.customScale = scale\n        this.scale = { ...Constants.DEFAULT_DIMENSIONS_SCALE }\n        if (dimensions) {\n            this.dimensions = dimensions\n            this.updateSvgWidthScale()\n            this.updateSvgHeightScale()\n        }\n        this.graph = null;\n        if (!d3) throw new Error(\"d3 is not found. Tarang may not behave as expected.\")\n        else this.d3 = d3\n    }\n    init() {\n    }\n    update() {\n    }\n    clear() {\n        if (this.graph) {\n            this.graph.selectAll(\"*\").remove()\n        }\n    }\n    updateSvgHeightScale() {\n        let assumedHeight = parseInt(this.dimensions.WIDTH * 0.5)\n        if (this.dimensions.HEIGHT - assumedHeight) this.scale.HEIGHT = Math.abs(this.dimensions.HEIGHT - assumedHeight) / assumedHeight * this.customScale\n        else this.scale.HEIGHT = this.customScale\n        // console.log({ scale: this.scale })\n    }\n    updateSvgWidthScale() {\n        let assumedWidth = binaryFloor(this.dimensions.WIDTH * 0.5)\n        if (this.dimensions.WIDTH - assumedWidth) this.scale.WIDTH = Math.abs(this.dimensions.WIDTH - assumedWidth) / assumedWidth * this.customScale\n        else this.scale.WIDTH = this.customScale\n        // console.log({ scale: this.scale })\n    }\n    destroy() {\n        this.clear()\n        this.graph.remove();\n        this.graph = null;\n    }\n}","import { SvgHandler } from \"../../SvgHandler\";\nimport { idman } from '../../utils/idman';\n\nexport class BarSvgHandler extends SvgHandler {\n    constructor(canvasId, dimensions, scale = 1) {\n        super(canvasId, dimensions, scale)\n        this.BAR_PADDING = 1\n    }\n    init(style) {\n        const { canvasId, customScale, dimensions, d3 } = this\n        this.graph = d3.select('#' + canvasId)\n            .append('svg')\n            .attr('height', dimensions.HEIGHT)\n            .attr('width', dimensions.WIDTH)\n            .attr('class', 'my-1')\n            .attr('style', style)\n            .attr('id', \"bar_\" + canvasId + \"_\" + idman.next());\n    }\n    update(frequencies, opacity = 1) {\n        const { BAR_PADDING, dimensions, graph, scale } = this\n        graph.selectAll('rect')\n            .data(frequencies)\n            .enter()\n            .append('rect')\n            // .attr('fill-opacity', function (d) {\n            //     return opacity\n            // })\n            .attr('fill', function (d) {\n                return \"#000\"\n            })\n            .attr('width', dimensions.WIDTH / frequencies.length - BAR_PADDING)\n            .attr('x', function (d, i) {\n                return i * ((dimensions.WIDTH * scale.WIDTH) / frequencies.length);\n                // return i * (dimensions.WIDTH / frequencies.length);\n            })\n        graph.selectAll('rect')\n            .data(frequencies)\n            .attr('y', function (d, i) {\n                return dimensions.HEIGHT - (d * scale.HEIGHT)\n            })\n            .attr('height', function (d, i) {\n                return (d * scale.HEIGHT)\n            });\n    }\n}\n","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport Constants from \"../../Constants\";\r\nimport { idman } from '../../utils/idman';\r\nconst initialDimensions = Constants.DEFAULT_DIMENSIONS\r\nconst playingStatus = Constants.PLAYING_STATUS\r\nimport { BarSvgHandler } from \"./BarSvgHandler\";\r\nimport barStyle from \"./Bar.module.css\"\r\n\r\nexport default function Bar({\r\n    audioUrl,\r\n    onEnded,\r\n    loop = false,\r\n    coverArtUrl,\r\n    width,\r\n    height,\r\n    controls = false,\r\n    muted = false,\r\n    volume = 0.8,\r\n    scale = 1,\r\n    opacity }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [prevAudioUrl, setPrevAudioUrl] = useState(\"\")\r\n    const [isPlaying, setIsPlaying] = useState(playingStatus.STOPPED)\r\n    const [canvasId, setCanvasId] = useState(idman.next())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isMute, muteAudio] = useState(false)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    // WIDTH: binaryFloor(width)\r\n                    WIDTH: width\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (controls) {\r\n                if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: height\r\n                        }\r\n                    });\r\n                } else {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height, controls])\r\n\r\n    useEffect(() => {\r\n        if (audioSrcRef.current && audioContextRef.current) {\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n            else audioSrcRef.current.disconnect(audioContextRef.current.destination);\r\n        }\r\n    }, [isMute])\r\n\r\n    useEffect(() => {\r\n        muteAudio(muted)\r\n    }, [muted])\r\n\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume\r\n    }, [volume])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying == playingStatus.PLAYING) play()\r\n    }, [audioUrl])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.clear()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n    const updateSvg = (frequencies) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.update(frequencies, opacity)\r\n        }\r\n    }\r\n\r\n    const createSvg = (frequencies) => {\r\n        // console.log(\"creating visualization graph \", { d3 })\r\n        if (!svgRef.current) {\r\n            svgRef.current = new BarSvgHandler(canvasId, dimensions, scale)\r\n            svgRef.current.init()\r\n        }\r\n\r\n        const updateFrequencyData = () => {\r\n            try {\r\n                if (!audioRef.current || audioRef.current.paused) {\r\n                    cancelAnimationFrame(updateFrequencyData)\r\n                    // return;\r\n                } else {\r\n                    requestAnimationFrame(updateFrequencyData)\r\n                    updateSvg(frequencies)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n        updateFrequencyData()\r\n\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            if (!audioUrl) return;\r\n            if (prevAudioUrl != audioUrl) {\r\n                if (audioRef.current.src) setPrevAudioUrl(audioRef.current.src)\r\n                else setPrevAudioUrl(audioUrl)\r\n                if (isPlaying == playingStatus.PLAYING) stop()\r\n                if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n                if (!audioRef.current) audioRef.current = new Audio(audioUrl)\r\n                else audioRef.current.src = audioUrl\r\n                audioRef.current.crossOrigin = \"anonymous\"\r\n\r\n                if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audioRef.current)\r\n\r\n                // audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n                audioRef.current.volume = volume\r\n                audioRef.current.load()\r\n                audioRef.current.onended = (event) => {\r\n                    clearSvg();\r\n                    if (loop) play()\r\n                    else if (typeof onEnded == \"function\") onEnded();\r\n                }\r\n                analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n                audioSrcRef.current.connect(analyserRef.current);\r\n                if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            }\r\n\r\n            setIsPlaying(playingStatus.PLAYING)\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            audioRef.current.play()\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const pause = () => {\r\n        setIsPlaying(playingStatus.PAUSED)\r\n        audioRef.current.pause()\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(playingStatus.STOPPED)\r\n        audioRef.current.pause()\r\n        audioRef.current.currentTime = 0\r\n        clearSvg()\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        muteAudio(!isMute)\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            className={\" \".concat(barStyle.tarangContainer, \" \", \"tarang-bar\")}\r\n            style={{\r\n                width: (dimensions.WIDTH),\r\n                height: isControlsVisible ? ((dimensions.HEIGHT) + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT,\r\n                backgroundImage: `linear-gradient(to bottom, #aaa6, #aaad), url(${coverArtUrl})`,\r\n            }}>\r\n            <div className={barStyle.tarangSvgContainer} id={canvasId} style={{\r\n                width: dimensions.WIDTH,\r\n                height: dimensions.HEIGHT\r\n            }}>\r\n            </div>\r\n            {isControlsVisible ? <div className={barStyle.tarangContorlsContainer} style={{ height: dimensions.CONTROLS_HEIGHT }}>\r\n                {isPlaying != playingStatus.PLAYING ? <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlPlay)} onClick={play}>Play</button> : null}\r\n                {isPlaying == playingStatus.PLAYING ? <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlStop)} onClick={pause}>Pause</button> : null}\r\n                <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlStop)} onClick={stop}>Stop</button>\r\n                <button className={\" \".concat(barStyle.tarangControls, \" \", barStyle.tarangControlMute)} onClick={toggleMute}>{isMute ? \"Unmute\" : \"Mute\"}</button>\r\n            </div> : null}\r\n        </div>\r\n    </>\r\n}","import { SvgHandler } from \"../../SvgHandler\";\nimport { idman } from '../../utils/idman';\n\nexport class LineSvgHandler extends SvgHandler {\n    constructor(canvasId, dimensions, scale = 1) {\n        super(canvasId, dimensions, scale)\n    }\n    init(background) {\n        const { canvasId, customScale, dimensions, d3 } = this\n        this.graph = d3.select('#' + canvasId)\n            .append('svg')\n            .attr('height', dimensions.HEIGHT)\n            .attr('width', dimensions.WIDTH)\n            .attr('class', 'my-1')\n            .attr('style', `${background}`)\n            .attr('id', \"line_\" + canvasId + \"_\" + idman.next());\n    }\n    update(frequencies, opacity) {\n        const { dimensions, d3, graph, scale } = this\n        this.clear()\n        var lineFunc = d3.line()\n            .x(function (d, i) {\n                // return i * dimensions.WIDTH / frequencies.length;\n                return i * dimensions.WIDTH * scale.WIDTH / frequencies.length;\n            })\n            .y(function (d) {\n                return dimensions.HEIGHT - (d * scale.HEIGHT);\n            })\n        graph.append('path')\n            .attr('d', lineFunc(frequencies))\n            .attr('stroke', 'black')\n            // .attr('fill-opacity', opacity)\n            .attr('fill', 'none')\n    }\n}","import React, { useEffect, useRef, useState, Fragment } from \"react\";\r\nimport Constants from \"../../Constants\";\r\nimport { idman } from '../../utils/idman';\r\nconst initialDimensions = Constants.DEFAULT_DIMENSIONS\r\nconst playingStatus = Constants.PLAYING_STATUS\r\nimport { LineSvgHandler } from \"./LineSvgHandler\";\r\nimport lineStyle from \"./Line.module.css\"\r\n\r\nexport default function Line({\r\n    audioUrl,\r\n    onEnded,\r\n    loop = false,\r\n    coverArtUrl,\r\n    width,\r\n    height,\r\n    controls = false,\r\n    muted = false,\r\n    volume = 0.8,\r\n    scale = 1,\r\n    opacity }) {\r\n    // TODO: add state loaded. to check that the user has interacted with the page. so that the autoplay functionality can also be added in future\r\n    const [prevAudioUrl, setPrevAudioUrl] = useState(\"\")\r\n    const [isPlaying, setIsPlaying] = useState(playingStatus.STOPPED)\r\n    const [canvasId, setCanvasId] = useState(idman.next())\r\n    const [dimensions, setDimensions] = useState(initialDimensions)\r\n    const [isControlsVisible, setIsControlsVisible] = useState(true)\r\n    const [isMute, muteAudio] = useState(true)\r\n    const audioRef = useRef(new Audio())\r\n    const audioContextRef = useRef(null)\r\n    const audioSrcRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const svgRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setIsControlsVisible(controls)\r\n    }, [controls])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(width) && width != dimensions.WIDTH) {\r\n            setDimensions(newDimensions => {\r\n                return {\r\n                    ...newDimensions,\r\n                    // WIDTH: binaryFloor(width)\r\n                    WIDTH: width\r\n                }\r\n            });\r\n        }\r\n    }, [width])\r\n\r\n    useEffect(() => {\r\n        clearSvg()\r\n        if (!isNaN(height) && height != dimensions.HEIGHT) {\r\n            if (controls) {\r\n                if (height > dimensions.CONTROLS_HEIGHT * 2) {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: height\r\n                        }\r\n                    });\r\n                } else {\r\n                    setDimensions(newDimensions => {\r\n                        return {\r\n                            ...newDimensions,\r\n                            HEIGHT: dimensions.CONTROLS_HEIGHT * 2\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                setDimensions(newDimensions => {\r\n                    return {\r\n                        ...newDimensions,\r\n                        HEIGHT: height\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [height, controls])\r\n\r\n    useEffect(() => {\r\n        if (audioSrcRef.current && audioContextRef.current) {\r\n            if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n            else audioSrcRef.current.disconnect(audioContextRef.current.destination);\r\n        }\r\n    }, [isMute])\r\n\r\n    useEffect(() => {\r\n        muteAudio(muted)\r\n    }, [muted])\r\n\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume\r\n    }, [volume])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying == playingStatus.PLAYING) play()\r\n    }, [audioUrl])\r\n\r\n    const clearSvg = () => {\r\n        if (svgRef.current) svgRef.current.clear()\r\n        // console.log(\"clearing svg\")\r\n    }\r\n\r\n    // const getSvgHeight = () => {\r\n    //     let ratio = getSvgHeightScale()\r\n    //     let newHeight = dimensions.HEIGHT * ratio\r\n    //     console.log({newHeight}, {dimensions})\r\n    //     return newHeight        \r\n    // }\r\n\r\n\r\n    const updateSvg = (frequencies) => {\r\n        analyserRef.current.getByteFrequencyData(frequencies);\r\n        if (svgRef.current && frequencies.length) {\r\n            svgRef.current.update(frequencies, opacity)\r\n        }\r\n    }\r\n\r\n    const createSvg = (frequencies) => {\r\n        // console.log(\"creating visualization graph \", { d3 })\r\n        if (!svgRef.current) {\r\n            svgRef.current = new LineSvgHandler(canvasId, dimensions, scale)\r\n            svgRef.current.init()\r\n        }\r\n\r\n        const updateFrequencyData = () => {\r\n            try {\r\n                if (!audioRef.current || audioRef.current.paused) {\r\n                    cancelAnimationFrame(updateFrequencyData)\r\n                    // return;\r\n                } else {\r\n                    requestAnimationFrame(updateFrequencyData)\r\n                    updateSvg(frequencies)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n        updateFrequencyData()\r\n    }\r\n\r\n    // useEffect(updateSvg, [frequencyData])\r\n    const play = () => {\r\n        try {\r\n            if (!audioUrl) return;\r\n            if (prevAudioUrl != audioUrl) {\r\n                if (audioRef.current.src) setPrevAudioUrl(audioRef.current.src)\r\n                else setPrevAudioUrl(audioUrl)\r\n                if (isPlaying == playingStatus.PLAYING) stop()\r\n                if (!audioContextRef.current) audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)()\r\n                if (!audioRef.current) audioRef.current = new Audio(audioUrl)\r\n                else audioRef.current.src = audioUrl\r\n                audioRef.current.crossOrigin = \"anonymous\"\r\n\r\n                if (!audioSrcRef.current) audioSrcRef.current = audioContextRef.current.createMediaElementSource(audioRef.current)\r\n\r\n                // audioRef.current = audioSrcRef.current.mediaElement\r\n\r\n                audioRef.current.volume = volume\r\n                audioRef.current.load()\r\n                audioRef.current.onended = (event) => {\r\n                    clearSvg();\r\n                    if (loop) play()\r\n                    if (typeof onEnded == \"function\") onEnded();\r\n                }\r\n                analyserRef.current = audioContextRef.current.createAnalyser()\r\n\r\n                audioSrcRef.current.connect(analyserRef.current);\r\n                if (!isMute) audioSrcRef.current.connect(audioContextRef.current.destination);\r\n\r\n            }\r\n\r\n            setIsPlaying(playingStatus.PLAYING)\r\n            analyserRef.current.fftSize = dimensions.WIDTH;\r\n            const bufferLength = analyserRef.current.frequencyBinCount;\r\n            const frequencies = new Uint8Array(bufferLength);\r\n            analyserRef.current.getByteFrequencyData(frequencies);\r\n            audioRef.current.play()\r\n            // console.log({ frequencies })\r\n            createSvg(frequencies)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const pause = () => {\r\n        setIsPlaying(playingStatus.PAUSED)\r\n        audioRef.current.pause()\r\n    }\r\n\r\n    const stop = () => {\r\n        setIsPlaying(playingStatus.STOPPED)\r\n        audioRef.current.pause()\r\n        clearSvg()\r\n        audioRef.current.currentTime = 0\r\n    }\r\n\r\n    const toggleMute = () => {\r\n        muteAudio(!isMute)\r\n    }\r\n\r\n    const focusIn = () => {\r\n        if (!isControlsVisible) {\r\n            if (!isPlaying) {\r\n                play()\r\n            }\r\n        }\r\n    }\r\n\r\n    const focusOut = () => {\r\n        if (!isControlsVisible) {\r\n            if (isPlaying) {\r\n                stop()\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleFocus = () => {\r\n        if (isPlaying) focusOut()\r\n        else focusIn()\r\n    }\r\n\r\n    return <>\r\n        <div\r\n            onMouseEnter={focusIn}\r\n            onFocus={focusIn}\r\n            onPointerEnter={focusIn}\r\n\r\n            // onTouch={toggleFocus}\r\n            // onClick={toggleFocus}\r\n\r\n            onMouseLeave={focusOut}\r\n            onBlur={focusOut}\r\n            onPointerLeave={focusIn}\r\n\r\n            className={\" \".concat(lineStyle.tarangContainer, \" \", \"tarang-line\")}\r\n            style={{\r\n                width: dimensions.WIDTH,\r\n                height: isControlsVisible ? ((dimensions.HEIGHT) + dimensions.CONTROLS_HEIGHT) : dimensions.HEIGHT,\r\n                background: `linear-gradient(to bottom, #aaa6, #aaad), url(${coverArtUrl})`,\r\n            }}>\r\n            <div className={lineStyle.tarangSvgContainer} id={canvasId} style={{\r\n                width: dimensions.WIDTH,\r\n                height: dimensions.HEIGHT,\r\n            }}>\r\n            </div>\r\n            {isControlsVisible ? <div className={lineStyle.tarangContorlsContainer} style={{ height: dimensions.CONTROLS_HEIGHT }}>\r\n                {isPlaying != playingStatus.PLAYING ? <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlPlay)} onClick={play}>Play</button> : null}\r\n                {isPlaying == playingStatus.PLAYING ? <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlPlay)} onClick={pause}>Pause</button> : null}\r\n                <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlStop)} onClick={stop}>Stop</button>\r\n                <button className={\" \".concat(lineStyle.tarangControls, \" \", lineStyle.tarangControlMute)} onClick={toggleMute}>{isMute ? \"Unmute\" : \"Mute\"}</button>\r\n            </div> : null}\r\n        </div>\r\n    </>\r\n}","import binaryCeil from \"./lib/utils/binaryCeil\"\nimport binaryFloor from \"./lib/utils/binaryFloor\"\nimport constants from \"./lib/Constants\"\nimport { SvgHandler } from \"./lib/SvgHandler\"\nimport Bar from \"./lib/components/Bar/Bar\"\nimport Line from \"./lib/components/Line/Line\"\n\nexport const Tarang = {\n  Bar,\n  Line,\n  utils: {\n    binaryCeil,\n    binaryFloor\n  },\n  SvgHandler,\n  ...constants\n}\n","function binaryCeil(number) {\n    let returnValue = 1\n    do {\n        returnValue = returnValue * 2;\n        number = number / 2;\n    } while (number / 2 > 0)\n    return returnValue;\n}\n\nexport default binaryCeil;","import React, { useState } from 'react'\n\n\nimport { Tarang } from 'tarang'\nimport 'tarang/dist/index.css'\n\nconst App = () => {\n  const initialSrcArray = [\n    {\n      audioUrl: \"https://tarang.surge.sh/audio/example.mp3\",\n      coverArtUrl: \"https://tarang.surge.sh/images/example-cover.png\"\n      // audioUrl: \"http://192.168.1.23:8080/audio/example.mp3\",\n      // coverArtUrl: \"http://192.168.1.23:8080/images/example-cover.png\"\n    }\n  ]\n\n  const DEFAULT_SRC = 0\n  const [srcArray, updateSrcArray] = useState([...initialSrcArray])\n  const [src, updateSrc] = useState(DEFAULT_SRC)\n  const [newAudioUrl, setNewAudioUrl] = useState('')\n  const [newCoverArtUrl, setNewCoverArtUrl] = useState('')\n  const [lineControlsVisible, setLineControlsVisible] = useState(true)\n  const [barControlsVisible, setBarControlsVisible] = useState(true)\n  // const [lineDimensionsFormValues, setLineDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n  // const [barDimensionsFormValues, setBarDimensionsFormValues] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [lineDimensions, setLineDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [barDimensions, setBarDimensions] = useState(Tarang.DEFAULT_DIMENSIONS)\n  const [lineVisualizationUpdating, setLineVisualizationUpdating] = useState(false)\n  const [barVisualizationUpdating, setBarVisualizationUpdating] = useState(false)\n\n  const reset = () => { updateSrcArray([initialSrcArray[0]]); updateSrc(DEFAULT_SRC); setNewAudioUrl(''); setNewCoverArtUrl(''); }\n  const setSrc = (index) => { updateSrc(index) }\n  const updateNewAudio = () => {\n    if (newAudioUrl) {\n      updateSrcArray(srcArray.concat([{ audioUrl: newAudioUrl, coverArtUrl: newCoverArtUrl || \"#\" }]))\n    }\n  }\n\n  const getFileName = (url) => {\n    let src = url.split(\"/\");\n    return src.length ? src[src.length - 1] : src;\n  }\n\n  // const updateLineVisualization = () => {\n  //   setLineVisualizationUpdating(true)\n  //   setLineDimensions(lineDimensionsFormValues)\n  //   setTimeout(() => {\n  //     setLineVisualizationUpdating(false)\n  //   }, [100])\n  // }\n\n  // const updateBarVisualization = () => {\n  //   setBarVisualizationUpdating(true)\n  //   setBarDimensions(barDimensionsFormValues)\n  //   setTimeout(() => {\n  //     setBarVisualizationUpdating(false)\n  //   }, [100])\n  // }\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: 'lightsteelblue' }}>\n      <section>\n        <table>\n          <thead>\n            <tr>\n              <td>\n                <legend>Playlist</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"fit-content\" }}>\n                  <tbody>\n                    {\n                      srcArray.map((srcItem, srcIndex) => <tr key={JSON.stringify(srcItem).length + \"_\" + srcIndex} style={{ \"textDecoration\": \"link\", \"cursor\": \"pointer\" }}>\n                        <td>\n                          <button onClick={() => setSrc(srcIndex)}>{getFileName(srcItem.audioUrl)}</button>\n                        </td>\n                      </tr>) || null\n                    }\n                    <tr>\n                      <td style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                        <input style={{ width: \"90%\", display: \"block\" }} type=\"url\" value={newAudioUrl} onChange={(e) => setNewAudioUrl(e.target.value)} placeholder=\"Enter mp3 url\" />\n                        <input style={{ width: \"90%\", display: \"block\" }} type=\"url\" value={newCoverArtUrl} onChange={(e) => setNewCoverArtUrl(e.target.value)} placeholder=\"Enter cover art url\" />\n                      </td>\n                      <td style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                        <button type=\"button\" onClick={updateNewAudio} style={{ display: \"block\" }}>Set</button>\n                        <button onClick={reset} style={{ display: \"block\" }}>Reset</button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <legend>Now Playing</legend>\n                <table style={{ position: 'relative', width: \"400px\", height: \"100px\", maxHeight: \"300px\", overflowY: \"scroll\" }}>\n                  <tbody>\n                    <tr>\n                      <th>\n                        {getFileName(srcArray[src].audioUrl)}\n                      </th>\n                    </tr>\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n                          title={JSON.stringify({\n                            width: lineDimensions.WIDTH,\n                            height: lineDimensions.HEIGHT,\n                            controls: lineControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 0.7,\n                          }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                height={lineDimensions.HEIGHT}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.7}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n                          title={JSON.stringify({\n                            width: barDimensions.WIDTH,\n                            height: barDimensions.HEIGHT,\n                            controls: barControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 0.7,\n                          }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                height={barDimensions.HEIGHT}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.7}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph (halved)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n                          style={{ float: \"right\" }}\n                          title={\n                            JSON.stringify({\n                              width: lineDimensions.WIDTH,\n                              height: lineDimensions.HEIGHT / 2,\n                              controls: lineControlsVisible,\n                              audioUrl: srcArray[src].audioUrl,\n                              coverArtUrl: srcArray[src].coverArtUrl,\n                              scale: 0.5,\n                            }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                height={lineDimensions.HEIGHT / 2}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.5}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph (halved)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div title={JSON.stringify({\n                          width: barDimensions.WIDTH,\n                          height: barDimensions.HEIGHT / 2,\n                          controls: barControlsVisible,\n                          audioUrl: srcArray[src].audioUrl,\n                          coverArtUrl: srcArray[src].coverArtUrl,\n                          scale: 0.5\n                        }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                height={barDimensions.HEIGHT / 2}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={0.5}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph (scaled)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n\n                          title={JSON.stringify({\n                            width: lineDimensions.WIDTH,\n                            controls: lineControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 1.1,\n                          }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                width={lineDimensions.WIDTH}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={1.1}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph (scaled)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n\n                          title={JSON.stringify({\n                            width: barDimensions.WIDTH,\n                            controls: barControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 1.1,\n                          }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                width={barDimensions.WIDTH}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={1.1}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <legend>Virtualization as Line Graph (on loop - please note that loop and onEnded are mutually exclusive)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"line-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setLineControlsVisible(e.target.checked)} id=\"line-control\" checked={lineControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n\n                          title={JSON.stringify({\n                            loop: true,\n                            width: lineDimensions.WIDTH,\n                            controls: lineControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 1.1,\n                          }, null, 4)}>\n                          {\n                            lineVisualizationUpdating ?\n                              null :\n                              <Tarang.Line\n                                loop={true}\n                                width={lineDimensions.WIDTH}\n                                controls={lineControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={1.1}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of line type visualization\" type=\"number\" value={lineDimensionsFormValues.WIDTH} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of line type visualization\" type=\"number\" value={lineDimensionsFormValues.HEIGHT} onChange={(e) => setLineDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateLineVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n              <td>\n                <legend>Virtualization as Bar Graph (event on end - please note that loop and onEnded are mutually exclusive)</legend>\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>\n                        <label htmlFor=\"bar-control\">Show Controls\n                          <input type=\"checkbox\" onChange={(e) => setBarControlsVisible(e.target.checked)} id=\"bar-control\" checked={barControlsVisible} />\n                        </label>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <div\n\n                          title={JSON.stringify({\n                            onEnded: `{() => alert(\"song ended\")}`,\n                            width: barDimensions.WIDTH,\n                            controls: barControlsVisible,\n                            audioUrl: srcArray[src].audioUrl,\n                            coverArtUrl: srcArray[src].coverArtUrl,\n                            scale: 1.1,\n                          }, null, 4)}>\n                          {\n                            barVisualizationUpdating ?\n                              null :\n                              <Tarang.Bar\n                                onEnded={() => alert(\"song ended\")}\n                                width={barDimensions.WIDTH}\n                                controls={barControlsVisible}\n                                audioUrl={srcArray[src].audioUrl}\n                                coverArtUrl={srcArray[src].coverArtUrl}\n                                scale={1.1}\n                              />\n                          }\n                        </div>\n                      </td>\n                    </tr>\n                    {/* <tr>\n                      <td>\n                        <div style={{ position: 'relative', display: \"flex\" }}>\n                          <input title=\"width of bar type visualization\" type=\"number\" value={barDimensionsFormValues.WIDTH} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, WIDTH: e.target.value } })} />\n                          <input title=\"height of bar type visualization\" type=\"number\" value={barDimensionsFormValues.HEIGHT} onChange={(e) => setBarDimensionsFormValues(dim => { return { ...dim, HEIGHT: e.target.value } })} />\n                          <input type=\"button\" onClick={updateBarVisualization} value=\"Set\" />\n                        </div>\n                      </td>\n                    </tr> */}\n                  </tbody>\n                </table>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}